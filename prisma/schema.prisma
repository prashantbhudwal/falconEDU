// OpenAI CHAT: https://chat.openai.com/share/1ce7799d-ee4f-44b3-af2c-d57c2b00b1cd

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_DEV")
  directUrl = env("DIRECT_URL_DEV")
}

model Metadata {
  id           Int            @id @default(autoincrement())
  board        String
  grade        String
  subject      String
  topic        String
  subTopic     String
  Question     Question[]     @relation("QuestionToMetadata")
  BlockContent BlockContent[] @relation("BlockContentToMetadata")
}

model TeachingResource {
  id           Int            @id @default(autoincrement())
  teacher      Teacher        @relation(fields: [teacherId], references: [id])
  teacherId    Int
  resourceType ResourceType
  lessonBlock  LessonBlock?
  QuestionBank QuestionBank[]
}

enum ResourceType {
  LESSON_PLAN
  LESSON_BLOCK
  QUESTION_BANK
}

model LessonPlan {
  id            Int         @id @default(autoincrement())
  content       String
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
}

model LessonBlock {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int              @unique
  blockContent       BlockContent[]
  lessonPlans        LessonPlan[]
}

model BlockContent {
  id            Int         @id @default(autoincrement())
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
  text          Json
  type          String
  emoji         String
  Metadata      Metadata[]  @relation("BlockContentToMetadata")
}

model QuestionBank {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int
  questions          Question[]
}

model Question {
  id                    Int           @id @default(autoincrement())
  type                  String?
  question              String?
  bloomLevel            String?
  bloomLevelExplanation String?
  explanation           String?
  options               String[]      @default([])
  answerKey             String[]      @default([])
  QuestionBank          QuestionBank? @relation(fields: [questionBankId], references: [id])
  questionBankId        Int?
  Metadata              Metadata[]    @relation("QuestionToMetadata")
}

// Users
model Teacher {
  id                   Int                     @id @default(autoincrement())
  name                 String
  email                String                  @unique
  password             String
  phone                String
  profile              TeacherProfile?
  avatar               String                  @default("chubby.png")
  accountType          String
  individualSub        IndividualSubscription?
  school               School?                 @relation(fields: [schoolId], references: [id])
  schoolId             Int?
  schoolSub            SchoolSubscription?     @relation(fields: [schoolSubscriptionId], references: [id])
  schoolSubscriptionId Int?
  classes              String[]                @default([])
  teachingResources    TeachingResource[]
}

model TeacherProfile {
  id                    Int      @id @default(autoincrement())
  teacher               Teacher  @relation(fields: [teacherId], references: [id])
  teacherId             Int      @unique
  bio                   String   @default("")
  teachingExperience    Int      @default(0)
  professionalInterests String[] @default([])
}

model IndividualSubscription {
  id        Int      @id @default(autoincrement())
  startDate DateTime @default(now())
  endDate   DateTime
  plan      String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId Int      @unique
}

model School {
  id            Int                  @id @default(autoincrement())
  name          String
  teachers      Teacher[]
  subscriptions SchoolSubscription[]
}

model SchoolSubscription {
  id        Int       @id @default(autoincrement())
  startDate DateTime  @default(now())
  endDate   DateTime
  plan      String
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  Int
  teachers  Teacher[]
}
