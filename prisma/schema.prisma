generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_DEV")
  directUrl = env("DIRECT_URL_DEV")
}

//**************** Auth Models ****************//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Custom fields
  plan              String?
  isTrialUser       Boolean          @default(true)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  userType          UserType
  role              Role             @default(TRIAL)
  teacherProfile    TeacherProfile?
  Chat              Chat[]
  payments          Payment[]
  StudentProfile    StudentProfile?
  orgAdminProfile   OrgAdminProfile?
  ParentProfile     ParentProfile?
  Event             Event[]
  Activity          Activity[]
  Notification      Notification[]
  Reaction          Reaction[]
}

//*********************** App Models *****************************//

//**************** App > Social Models ****************//

// An event is a record of an action that a user has taken on an entity.
// And entity can be a config, a bot, a class, a student, etc.

model Event {
  id             String     @id @default(cuid())
  initiatorId    String
  user           User       @relation(fields: [initiatorId], references: [id])
  entityId       String
  entityType     String
  action         String
  createdAt      DateTime   @default(now())
  activities     Activity[]
  reactions      Reaction[]
  reactionsCount Int        @default(0)

  @@index([initiatorId, createdAt])
}

// A system event is a record of an action that has been taken by the system.
// This might include reminders of a deadline, notifications of a new feature, etc.
model SystemEvent {
  id            String         @id @default(cuid())
  type          String
  entityId      String?
  entityType    String?
  action        String
  createdAt     DateTime       @default(now())
  notifications Notification[]
}

model Reaction {
  id        String       @id @default(cuid())
  eventId   String
  userId    String
  type      ReactionType
  count     Int          @default(1)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     Event        @relation(fields: [eventId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([eventId, userId, type]) // Ensure uniqueness for each type of reaction per user per event
  @@index([eventId, createdAt])
}

enum ReactionType {
  LIKE
  LOVE
  CLAP
  WOW
}

// An activity is a record of an event that has been created for a user.
// It is displayed in the user's activity feed.
model Activity {
  id            String         @id @default(cuid())
  eventId       String
  recipientId   String
  createdAt     DateTime       @default(now())
  event         Event          @relation(fields: [eventId], references: [id])
  user          User           @relation(fields: [recipientId], references: [id])
  notifications Notification[]

  @@index([eventId, createdAt, recipientId])
}

// A notification is a record of an activity that has been sent to a user.
// It is displayed in the user's notification feed or sent as a push notification.
model Notification {
  id            String       @id @default(cuid())
  activityId    String?
  recipientId   String
  title         String
  message       String
  metadata      Json
  isRead        Boolean      @default(false)
  readAt        DateTime?
  createdAt     DateTime     @default(now())
  activity      Activity?    @relation(fields: [activityId], references: [id])
  user          User         @relation(fields: [recipientId], references: [id])
  SystemEvent   SystemEvent? @relation(fields: [systemEventId], references: [id])
  systemEventId String?

  @@index([createdAt, recipientId])
}

//**************** App > Teacher Models ****************//

model ParentProfile {
  id          String           @id @default(cuid())
  User        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String           @unique
  preferences Json             @default("{}")
  createdAt   DateTime         @default(now())
  bio         String?          @default("")
  Org         Org?             @relation(fields: [orgId], references: [id])
  orgId       String?
  students    StudentProfile[]
}

model TeacherProfile {
  id                 String             @id @default(cuid())
  classes            String[]           @default([])
  teachingResources  TeachingResource[]
  bio                String             @default("")
  teachingExperience Int                @default(0)
  User               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String             @unique
  preferences        Json               @default("{}")
  BotConfig          BotConfig[]
  Class              Class[]
  orgMode            Boolean            @default(false)
  Org                Org?               @relation(fields: [orgId], references: [id])
  orgId              String?
  sources            Source[]
}

model OrgAdminProfile {
  id          String    @id @default(cuid())
  designation String    @default("")
  org         Org?      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String?
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  adminRole   AdminRole @default(MANAGER)
}

enum AdminRole {
  SUPER_ADMIN
  MANAGER
}

model Org {
  id              String            @id @default(cuid())
  type            OrgType
  name            String
  brandName       String            @default("")
  // teacherSeats  Int               @default(0) 
  // studentSeats  Int               @default(0)
  teacher         TeacherProfile[]
  admin           OrgAdminProfile[]
  students        StudentProfile[]
  ParentProfile   ParentProfile[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  board           Board[]
  language_medium Language          @default(ENGLISH)
  language_native String?
  state           IndianStates      @default(Andhra_Pradesh)
  city            String?
  pincode         Int?
}

model Board {
  id    String    @id @default(cuid())
  name  BoardName @unique
  other String?
  org   Org[]
}

enum BoardName {
  CBSE
  CISCE
  IB
  NIOS
  CAMBRIDGE
  STATE_BOARD
  OTHER
}

enum Language {
  ENGLISH
  HINDI
}

enum IndianStates {
  Andhra_Pradesh
  Arunachal_Pradesh
  Assam
  Bihar
  Chhattisgarh
  Goa
  Gujarat
  Haryana
  Himachal_Pradesh
  Jharkhand
  Karnataka
  Kerala
  Madhya_Pradesh
  Maharashtra
  Manipur
  Meghalaya
  Mizoram
  Nagaland
  Odisha
  Punjab
  Rajasthan
  Sikkim
  Tamil_Nadu
  Telangana
  Tripura
  Uttar_Pradesh
  Uttarakhand
  West_Bengal
  Andaman_And_Nicobar_Islands
  Chandigarh
  Dadra_And_Nagar_Haveli_And_Daman_And_Diu
  Lakshadweep
  Delhi
  Puducherry
  Jammu_And_Kashmir
  Ladakh
}

enum OrgType {
  SCHOOL
  TUTORIAL
  COLLEGE
  COMPANY
  OTHER
}

model Class {
  id         String           @id @default(cuid())
  name       String?
  teacherId  String
  grade      Grade            @default(GRADE_5)
  section    String?
  isActive   Boolean          @default(true)
  Teacher    TeacherProfile   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students   StudentProfile[]
  BotShare   BotShare[]
  BotConfig  BotConfig[]
  Invitation Invitation[]
  createdAt  DateTime         @default(now())
  sources    Source[]
}

enum Grade {
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
}

enum UserType {
  TEACHER
  STUDENT
  PARENT
  ORG_ADMIN
}

enum Role {
  TRIAL
  PRO
}

model Source {
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  id               String          @id @default(cuid())
  title            String
  description      String?
  content          String
  TeacherProfile   TeacherProfile? @relation(fields: [teacherProfileId], references: [id])
  teacherProfileId String?
  classes          Class[]
  BotConfig        BotConfig[]
}

model BotConfig {
  id              String            @id @default(cuid())
  teacher         TeacherProfile    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  Class           Class?            @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId         String?
  teacherId       String
  name            String
  description     String?
  image           String?
  preferences     Json              @default("{}")
  createdAt       DateTime          @default(now())
  published       Boolean           @default(false)
  Bot             Bot[]
  BotShare        BotShare[]
  type            String            @default("chat")
  isActive        Boolean           @default(true)
  parsedQuestions parsedQuestions[]
  isHidden        Boolean           @default(false)
  hasTimeLimit    Boolean           @default(false)
  timeLimit       Int?              @default(0)
  canReAttempt    Boolean           @default(false)
  maxAttempts     Int?              @default(0)
  learningGoals   LearningGoals[]
  sources         Source[]
}

model LearningGoals {
  id               String           @id @default(cuid())
  botConfigId      String
  botConfig        BotConfig        @relation(fields: [botConfigId], references: [id], onDelete: Cascade)
  goal             String
  cognitiveLevel   CognitiveLevel
  assessmentMethod QuestionType[]   @default([])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  GoalAssessment   GoalAssessment[]
  goalNumber       Int
}

enum CognitiveLevel {
  knowledge
  comprehension
  application
  analysis
  synthesis
  evaluation
}

model parsedQuestions {
  id                  String             @id @default(cuid())
  botConfigId         String
  BotConfig           BotConfig          @relation(fields: [botConfigId], references: [id], onDelete: Cascade)
  question_type       QuestionType
  question            String
  hint                String?
  question_number     Int
  options             String[]           @default([])
  correct_answer      String[]           @default([])
  sample_answer       String?
  max_score           Float?
  isArchived          Boolean            @default(false)
  isPossiblyWrong     Boolean            @default(false)
  isPossiblyWrongDesc String             @default("")
  botChatQuestions    BotChatQuestions[]
}

//**************** App > Student Models ****************//
// Chat: https://chat.openai.com/share/ffbb895f-a632-4410-9178-134f29916aaf

model StudentProfile {
  id              String         @id @default(cuid())
  User            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String         @unique
  grade           String?
  preferences     Json           @default("{}")
  createdAt       DateTime       @default(now())
  bot             Bot[]
  BotShare        BotShare[]
  Class           Class[]
  bio             String?        @default("")
  Org             Org?           @relation(fields: [orgId], references: [id])
  orgId           String?
  ParentProfile   ParentProfile? @relation(fields: [parentProfileId], references: [id])
  parentProfileId String?
}

model Bot {
  id          String         @id @default(cuid())
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId   String
  BotConfig   BotConfig      @relation(fields: [botConfigId], references: [id], onDelete: Cascade)
  botConfigId String
  BotShare    BotShare?      @relation(fields: [botShareId], references: [id])
  botShareId  String?
  BotChat     BotChat[]
  name        String
  createdAt   DateTime       @default(now())
  isActive    Boolean        @default(true)
  isSubmitted Boolean        @default(false)
  isChecked   Boolean        @default(false)
  isHidden    Boolean        @default(false)
}

model BotChat {
  id                String             @id @default(uuid())
  bot               Bot                @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId             String
  messages          Json
  createdAt         DateTime           @default(now())
  isDefault         Boolean            @default(false)
  isRead            Boolean            @default(false)
  BotChatQuestions  BotChatQuestions[]
  attemptNumber     Int                @default(1)
  isSubmitted       Boolean            @default(false)
  isChecked         Boolean            @default(false)
  name              String?
  goalAssessment    GoalAssessment[]
  feedbackToStudent String?            @default("")
}

model GoalAssessment {
  id             String               @id @default(uuid())
  botChat        BotChat              @relation(fields: [botChatId], references: [id], onDelete: Cascade)
  botChatId      String
  learningGoal   LearningGoals?       @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)
  learningGoalId String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  result         GoalAssessmentResult
  resultDesc     String
  aiRemarks      String               @default("")
}

enum GoalAssessmentResult {
  a
  b
  c
  d
  f
}

model BotChatQuestions {
  createdAt         DateTime         @default(now())
  id                Int              @id @default(autoincrement())
  botChat           BotChat          @relation(fields: [botChatId], references: [id], onDelete: Cascade)
  botChatId         String
  student_answer    String[]         @default([])
  isCorrect         Boolean // Whether the student's answer is correct
  score             Float? // A score representing the quality of the student's answer
  feedback          String? // Qualitative feedback on the student's answer
  parsedQuestions   parsedQuestions? @relation(fields: [parsedQuestionsId], references: [id], onDelete: Cascade)
  parsedQuestionsId String?
}

enum QuestionType {
  OBJECTIVE_MULTIPLE_CHOICE_SINGLE_ANSWER
  OBJECTIVE_TRUE_FALSE
  OBJECTIVE_FILL_IN_THE_BLANK_SINGLE_ANSWER // For questions with one blank
  OBJECTIVE_FILL_IN_THE_BLANK_MULTIPLE_ANSWER // For questions with multiple blanks
  OBJECTIVE_MATCH_THE_FOLLOWING
  OBJECTIVE_MULTIPLE_CHOICE_MULTIPLE_ANSWER
  SUBJECTIVE_ESSAY // For longer, essay-type answers
  SUBJECTIVE_SHORT_ANSWER // For shorter, one or two sentence answers
  OTHER
}

//**************** App > Invitation Models ****************//

model Invitation {
  createdAt       DateTime         @default(now())
  id              String           @id @default(cuid())
  studentEmail    String           @unique
  Class           Class?           @relation(fields: [classId], references: [id])
  classId         String
  status          InvitationStatus
  daysUntilExpiry Int?             @default(365)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

//**************** App > Sharing Models ****************//

model BotShare {
  id          String         @id @default(cuid())
  botConfigId String
  BotConfig   BotConfig      @relation(fields: [botConfigId], references: [id])
  studentId   String
  Student     StudentProfile @relation(fields: [studentId], references: [id])
  Class       Class?         @relation(fields: [classId], references: [id])
  classId     String?
  status      ShareStatus
  Bot         Bot[]
}

enum ShareStatus {
  REQUESTED
  APPROVED
}

//**************** App > Payment Models ****************//
model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  stripePaymentId String    @unique
  status          String
  paymentMethod   String
  amount          Float
  paymentDate     DateTime
  currency        String
  refundStatus    String?   @default("NOT_REFUNDED")
  refundDate      DateTime?
  refundAmount    Float?
}

//**************** App > Resource Models ****************//

model Metadata {
  id           Int            @id @default(autoincrement())
  board        String
  grade        String
  subject      String
  topic        String
  subTopic     String
  Question     Question[]     @relation("QuestionToMetadata")
  BlockContent BlockContent[] @relation("BlockContentToMetadata")
}

model TeachingResource {
  id           Int            @id @default(autoincrement())
  teacher      TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId    String
  resourceType String
  lessonBlock  LessonBlock?
  QuestionBank QuestionBank[]
}

model LessonPlan {
  id            Int         @id @default(autoincrement())
  content       String
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
}

model LessonBlock {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int              @unique
  blockContent       BlockContent[]
  lessonPlans        LessonPlan[]
}

model BlockContent {
  id            Int         @id @default(autoincrement())
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
  text          String
  type          String
  emoji         String
  Metadata      Metadata[]  @relation("BlockContentToMetadata")
}

model QuestionBank {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int
  questions          Question[]
}

model Question {
  id                    Int           @id @default(autoincrement())
  type                  String?
  question              String?
  bloomLevel            String?
  bloomLevelExplanation String?
  explanation           String?
  options               String[]      @default([])
  answerKey             String[]      @default([])
  QuestionBank          QuestionBank? @relation(fields: [questionBankId], references: [id])
  questionBankId        Int?
  Metadata              Metadata[]    @relation("QuestionToMetadata")
}

// Chat Models to store gpt chat history of each user along with some metadata

model Chat {
  id        String   @id @default(uuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  path      String
  messages  Json
  createdAt DateTime @default(now())
}
