// OpenAI CHAT: https://chat.openai.com/share/1ce7799d-ee4f-44b3-af2c-d57c2b00b1cd

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_DEV")
  directUrl = env("DIRECT_URL_DEV")
}

//**************** Auth Models ****************//

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Custom fields
  plan              String?
  isTrialUser       Boolean         @default(true)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  userType          UserType
  role              Role            @default(TRIAL)
  teacherProfile    TeacherProfile?
  Chat              Chat[]
  payments          Payment[]
  StudentProfile    StudentProfile?
}

//*********************** App Models *****************************//

//**************** App > Teacher Models ****************//

model TeacherProfile {
  id                 String             @id @default(cuid())
  classes            String[]           @default([])
  teachingResources  TeachingResource[]
  bio                String             @default("")
  teachingExperience Int                @default(0)
  User               User               @relation(fields: [userId], references: [id])
  userId             String             @unique
  preferences        Json               @default("{}")
  BotConfig          BotConfig[]
  Class              Class[]
}

model Class {
  id        String           @id @default(cuid())
  name      String
  teacherId String
  Teacher   TeacherProfile   @relation(fields: [teacherId], references: [id])
  students  StudentProfile[]
  BotShare  BotShare[]
}

enum UserType {
  TEACHER
  STUDENT
}

enum Role {
  TRIAL
  PRO
}

model BotConfig {
  id          String         @id @default(cuid())
  teacher     TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId   String
  name        String
  description String
  image       String
  preferences Json           @default("{}")
  createdAt   DateTime       @default(now())
  Bot         Bot[]
  BotShare    BotShare[]
}

//**************** App > Student Models ****************//
// Chat: https://chat.openai.com/share/ffbb895f-a632-4410-9178-134f29916aaf

model StudentProfile {
  id          String     @id @default(cuid())
  User        User       @relation(fields: [userId], references: [id])
  userId      String     @unique
  grade       String
  preferences Json       @default("{}")
  createdAt   DateTime   @default(now())
  bot         Bot[]
  BotShare    BotShare[]
  Class       Class?     @relation(fields: [classId], references: [id])
  classId     String?
}

model Bot {
  id            String         @id @default(cuid())
  student       StudentProfile @relation(fields: [studentId], references: [id])
  studentId     String
  BotConfig     BotConfig      @relation(fields: [botConfigId], references: [id])
  botConfigId   String
  BotShare      BotShare       @relation(fields: [botShareId], references: [id])
  botShareId    String
  BotChat       BotChat[]
  defaultChatId String
  name          String
  createdAt     DateTime       @default(now())
}

model BotChat {
  id        String   @id @default(uuid())
  bot       Bot      @relation(fields: [botId], references: [id])
  botId     String
  messages  Json
  createdAt DateTime @default(now())
  isDefault Boolean  @default(false)
}

//**************** App > Sharing Models ****************//

model BotShare {
  id          String         @id @default(cuid())
  botConfigId String
  BotConfig   BotConfig      @relation(fields: [botConfigId], references: [id])
  studentId   String
  Student     StudentProfile @relation(fields: [studentId], references: [id])
  Class       Class?         @relation(fields: [classId], references: [id])
  classId     String?
  status      ShareStatus
  Bot         Bot[]
}

enum ShareStatus {
  REQUESTED
  APPROVED
}

//**************** App > Payment Models ****************//
model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  stripePaymentId String    @unique
  status          String
  paymentMethod   String
  amount          Float
  paymentDate     DateTime
  currency        String
  refundStatus    String?   @default("NOT_REFUNDED")
  refundDate      DateTime?
  refundAmount    Float?
}

//**************** App > Resource Models ****************//

model Metadata {
  id           Int            @id @default(autoincrement())
  board        String
  grade        String
  subject      String
  topic        String
  subTopic     String
  Question     Question[]     @relation("QuestionToMetadata")
  BlockContent BlockContent[] @relation("BlockContentToMetadata")
}

model TeachingResource {
  id           Int            @id @default(autoincrement())
  teacher      TeacherProfile @relation(fields: [teacherId], references: [id])
  teacherId    String
  resourceType String
  lessonBlock  LessonBlock?
  QuestionBank QuestionBank[]
}

model LessonPlan {
  id            Int         @id @default(autoincrement())
  content       String
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
}

model LessonBlock {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int              @unique
  blockContent       BlockContent[]
  lessonPlans        LessonPlan[]
}

model BlockContent {
  id            Int         @id @default(autoincrement())
  lessonBlock   LessonBlock @relation(fields: [lessonBlockId], references: [id])
  lessonBlockId Int
  text          String
  type          String
  emoji         String
  Metadata      Metadata[]  @relation("BlockContentToMetadata")
}

model QuestionBank {
  id                 Int              @id @default(autoincrement())
  teachingResource   TeachingResource @relation(fields: [teachingResourceId], references: [id])
  teachingResourceId Int
  questions          Question[]
}

model Question {
  id                    Int           @id @default(autoincrement())
  type                  String?
  question              String?
  bloomLevel            String?
  bloomLevelExplanation String?
  explanation           String?
  options               String[]      @default([])
  answerKey             String[]      @default([])
  QuestionBank          QuestionBank? @relation(fields: [questionBankId], references: [id])
  questionBankId        Int?
  Metadata              Metadata[]    @relation("QuestionToMetadata")
}

// Chat Models to store gpt chat history of each user along with some metadata

model Chat {
  id        String   @id @default(uuid())
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  path      String
  messages  Json
  createdAt DateTime @default(now())
}
