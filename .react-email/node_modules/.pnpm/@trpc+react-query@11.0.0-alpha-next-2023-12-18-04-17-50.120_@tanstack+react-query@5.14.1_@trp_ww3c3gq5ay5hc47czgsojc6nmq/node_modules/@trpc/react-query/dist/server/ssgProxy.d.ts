import { DehydratedState, DehydrateOptions, InfiniteData, QueryClient } from '@tanstack/react-query';
import { inferRouterClient, TRPCClientError, TRPCUntypedClient } from '@trpc/client';
import { AnyProcedure, AnyQueryProcedure, AnyRootConfig, AnyRouter, DataTransformerOptions, inferProcedureInput, inferRouterContext } from '@trpc/server';
import { inferTransformedProcedureOutput } from '@trpc/server/shared';
import { Filter, ProtectedIntersection } from '@trpc/server/unstableInternalsExport';
import { CreateTRPCReactQueryClientConfig, ExtractCursorType, TRPCFetchInfiniteQueryOptions, TRPCFetchQueryOptions } from '../shared';
interface CreateSSGHelpersInternal<TRouter extends AnyRouter> {
    router: TRouter;
    ctx: inferRouterContext<TRouter>;
    transformer?: DataTransformerOptions;
}
interface CreateSSGHelpersExternal<TRouter extends AnyRouter> {
    client: inferRouterClient<TRouter> | TRPCUntypedClient<TRouter>;
}
type CreateServerSideHelpersOptions<TRouter extends AnyRouter> = CreateTRPCReactQueryClientConfig & (CreateSSGHelpersExternal<TRouter> | CreateSSGHelpersInternal<TRouter>);
type DecorateProcedure<TConfig extends AnyRootConfig, TProcedure extends AnyProcedure> = {
    /**
     * @link https://tanstack.com/query/v5/docs/react/guides/prefetching
     */
    fetch(input: inferProcedureInput<TProcedure>, opts?: TRPCFetchQueryOptions<inferTransformedProcedureOutput<TConfig, TProcedure>, TRPCClientError<TConfig>>): Promise<inferTransformedProcedureOutput<TConfig, TProcedure>>;
    /**
     * @link https://tanstack.com/query/v5/docs/react/guides/prefetching
     */
    fetchInfinite(input: inferProcedureInput<TProcedure>, opts?: TRPCFetchInfiniteQueryOptions<inferProcedureInput<TProcedure>, inferTransformedProcedureOutput<TConfig, TProcedure>, TRPCClientError<TConfig>>): Promise<InfiniteData<inferTransformedProcedureOutput<TConfig, TProcedure>, NonNullable<ExtractCursorType<inferProcedureInput<TProcedure>>> | null>>;
    /**
     * @link https://tanstack.com/query/v5/docs/react/guides/prefetching
     */
    prefetch(input: inferProcedureInput<TProcedure>, opts?: TRPCFetchQueryOptions<inferTransformedProcedureOutput<TConfig, TProcedure>, TRPCClientError<TConfig>>): Promise<void>;
    /**
     * @link https://tanstack.com/query/v5/docs/react/guides/prefetching
     */
    prefetchInfinite(input: inferProcedureInput<TProcedure>, opts?: TRPCFetchInfiniteQueryOptions<inferProcedureInput<TProcedure>, inferTransformedProcedureOutput<TConfig, TProcedure>, TRPCClientError<TConfig>>): Promise<void>;
};
/**
 * @internal
 */
type DecoratedProcedureSSGRecord<TRouter extends AnyRouter> = {
    [TKey in keyof Filter<TRouter['_def']['record'], AnyQueryProcedure | AnyRouter>]: TRouter['_def']['record'][TKey] extends AnyRouter ? DecoratedProcedureSSGRecord<TRouter['_def']['record'][TKey]> : DecorateProcedure<TRouter['_def']['_config'], TRouter['_def']['record'][TKey]>;
};
/**
 * Create functions you can use for server-side rendering / static generation
 * @see https://trpc.io/docs/client/nextjs/server-side-helpers
 */
export declare function createServerSideHelpers<TRouter extends AnyRouter>(opts: CreateServerSideHelpersOptions<TRouter>): ProtectedIntersection<{
    queryClient: QueryClient;
    dehydrate: (opts?: DehydrateOptions) => DehydratedState;
}, DecoratedProcedureSSGRecord<TRouter>>;
export {};
//# sourceMappingURL=ssgProxy.d.ts.map