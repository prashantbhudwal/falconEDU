'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var router = require('./router-09fb9cbd.js');
var TRPCError = require('./TRPCError-84cb03cf.js');
var procedureBuilder = require('./procedureBuilder-e0651292.js');
var index = require('./index-a496f86b.js');
var config = require('./config-774dae36.js');

/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */ class TRPCBuilder {
    context() {
        return new TRPCBuilder();
    }
    meta() {
        return new TRPCBuilder();
    }
    create(options) {
        return createTRPCInner()(options);
    }
}
/**
 * Initialize tRPC - done exactly once per backend
 */ const initTRPC = new TRPCBuilder();
function createTRPCInner() {
    return function initTRPCInner(runtime) {
        const errorFormatter = runtime?.errorFormatter ?? router.defaultFormatter;
        const transformer = router.getDataTransformer(runtime?.transformer ?? router.defaultTransformer);
        const config$1 = {
            transformer,
            isDev: runtime?.isDev ?? // eslint-disable-next-line @typescript-eslint/dot-notation
            globalThis.process?.env?.['NODE_ENV'] !== 'production',
            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,
            errorFormatter,
            isServer: runtime?.isServer ?? config.isServerDefault,
            /**
       * @internal
       */ $types: index.createFlatProxy((key)=>{
                throw new Error(`Tried to access "$types.${key}" which is not available at runtime`);
            })
        };
        {
            // Server check
            const isServer = runtime?.isServer ?? config.isServerDefault;
            if (!isServer && runtime?.allowOutsideOfServer !== true) {
                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);
            }
        }
        return {
            /**
       * These are just types, they can't be used
       * @internal
       */ _config: config$1,
            /**
       * Builder object for creating procedures
       */ procedure: procedureBuilder.createBuilder({
                meta: runtime?.defaultMeta
            }),
            /**
       * Create reusable middlewares
       */ middleware: procedureBuilder.createMiddlewareFactory(),
            /**
       * Create a router
       */ router: router.createRouterFactory(config$1),
            /**
       * Merge Routers
       */ mergeRouters: procedureBuilder.mergeRouters
        };
    };
}

const procedureTypes = [
    'query',
    'mutation',
    'subscription'
];

exports.callProcedure = router.callProcedure;
exports.defaultTransformer = router.defaultTransformer;
exports.getDataTransformer = router.getDataTransformer;
exports.TRPCError = TRPCError.TRPCError;
exports.getTRPCErrorFromUnknown = TRPCError.getTRPCErrorFromUnknown;
exports.createInputMiddleware = procedureBuilder.createInputMiddleware;
exports.createOutputMiddleware = procedureBuilder.createOutputMiddleware;
exports.experimental_standaloneMiddleware = procedureBuilder.experimental_standaloneMiddleware;
exports.initTRPC = initTRPC;
exports.procedureTypes = procedureTypes;
