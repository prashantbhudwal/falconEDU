import { d as defaultFormatter, g as getDataTransformer, a as defaultTransformer, c as createRouterFactory } from './router-f0c73097.mjs';
export { b as callProcedure, a as defaultTransformer, g as getDataTransformer } from './router-f0c73097.mjs';
export { T as TRPCError, g as getTRPCErrorFromUnknown } from './TRPCError-689e79f1.mjs';
import { c as createBuilder, a as createMiddlewareFactory, m as mergeRouters } from './procedureBuilder-233a443d.mjs';
export { b as createInputMiddleware, d as createOutputMiddleware, e as experimental_standaloneMiddleware } from './procedureBuilder-233a443d.mjs';
import { c as createFlatProxy } from './index-a9e3e610.mjs';
import { i as isServerDefault } from './config-50853f49.mjs';

/**
 * TODO: This can be improved:
 * - We should be able to chain `.meta()`/`.context()` only once
 * - Simplify typings
 * - Doesn't need to be a class but it doesn't really hurt either
 */ class TRPCBuilder {
    context() {
        return new TRPCBuilder();
    }
    meta() {
        return new TRPCBuilder();
    }
    create(options) {
        return createTRPCInner()(options);
    }
}
/**
 * Initialize tRPC - done exactly once per backend
 */ const initTRPC = new TRPCBuilder();
function createTRPCInner() {
    return function initTRPCInner(runtime) {
        const errorFormatter = runtime?.errorFormatter ?? defaultFormatter;
        const transformer = getDataTransformer(runtime?.transformer ?? defaultTransformer);
        const config = {
            transformer,
            isDev: runtime?.isDev ?? // eslint-disable-next-line @typescript-eslint/dot-notation
            globalThis.process?.env?.['NODE_ENV'] !== 'production',
            allowOutsideOfServer: runtime?.allowOutsideOfServer ?? false,
            errorFormatter,
            isServer: runtime?.isServer ?? isServerDefault,
            /**
       * @internal
       */ $types: createFlatProxy((key)=>{
                throw new Error(`Tried to access "$types.${key}" which is not available at runtime`);
            })
        };
        {
            // Server check
            const isServer = runtime?.isServer ?? isServerDefault;
            if (!isServer && runtime?.allowOutsideOfServer !== true) {
                throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);
            }
        }
        return {
            /**
       * These are just types, they can't be used
       * @internal
       */ _config: config,
            /**
       * Builder object for creating procedures
       */ procedure: createBuilder({
                meta: runtime?.defaultMeta
            }),
            /**
       * Create reusable middlewares
       */ middleware: createMiddlewareFactory(),
            /**
       * Create a router
       */ router: createRouterFactory(config),
            /**
       * Merge Routers
       */ mergeRouters
        };
    };
}

const procedureTypes = [
    'query',
    'mutation',
    'subscription'
];

export { initTRPC, procedureTypes };
