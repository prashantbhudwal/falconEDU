"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prism-react-renderer@1.3.5_react@18.2.0";
exports.ids = ["vendor-chunks/prism-react-renderer@1.3.5_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/dist/index.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/dist/index.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Prism: () => (/* reexport safe */ _prism_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultProps: () => (/* binding */ defaultProps)\n/* harmony export */ });\n/* harmony import */ var _prism_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../prism/index.js */ \"(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/prism/index.js\");\n/* harmony import */ var _themes_duotoneDark__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../themes/duotoneDark */ \"(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/themes/duotoneDark/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_@babel+core@7.23.6_react-dom@18.2.0_react@18.2.0/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nvar defaultProps = {\n    // $FlowFixMe\n    Prism: _prism_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    theme: _themes_duotoneDark__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n};\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\nvar normalizeEmptyLines = function(line) {\n    if (line.length === 0) {\n        line.push({\n            types: [\n                \"plain\"\n            ],\n            content: \"\\n\",\n            empty: true\n        });\n    } else if (line.length === 1 && line[0].content === \"\") {\n        line[0].content = \"\\n\";\n        line[0].empty = true;\n    }\n};\nvar appendTypes = function(types, add) {\n    var typesSize = types.length;\n    if (typesSize > 0 && types[typesSize - 1] === add) {\n        return types;\n    }\n    return types.concat(add);\n}; // Takes an array of Prism's tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type \"plain\".\n// This is not recursive to avoid exceeding the call-stack limit, since it's unclear\n// how nested Prism's tokens can become\nvar normalizeTokens = function(tokens) {\n    var typeArrStack = [\n        []\n    ];\n    var tokenArrStack = [\n        tokens\n    ];\n    var tokenArrIndexStack = [\n        0\n    ];\n    var tokenArrSizeStack = [\n        tokens.length\n    ];\n    var i = 0;\n    var stackIndex = 0;\n    var currentLine = [];\n    var acc = [\n        currentLine\n    ];\n    while(stackIndex > -1){\n        while((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]){\n            var content = void 0;\n            var types = typeArrStack[stackIndex];\n            var tokenArr = tokenArrStack[stackIndex];\n            var token = tokenArr[i]; // Determine content and append type to types if necessary\n            if (typeof token === \"string\") {\n                types = stackIndex > 0 ? types : [\n                    \"plain\"\n                ];\n                content = token;\n            } else {\n                types = appendTypes(types, token.type);\n                if (token.alias) {\n                    types = appendTypes(types, token.alias);\n                }\n                content = token.content;\n            } // If token.content is an array, increase the stack depth and repeat this while-loop\n            if (typeof content !== \"string\") {\n                stackIndex++;\n                typeArrStack.push(types);\n                tokenArrStack.push(content);\n                tokenArrIndexStack.push(0);\n                tokenArrSizeStack.push(content.length);\n                continue;\n            } // Split by newlines\n            var splitByNewlines = content.split(newlineRe);\n            var newlineCount = splitByNewlines.length;\n            currentLine.push({\n                types: types,\n                content: splitByNewlines[0]\n            }); // Create a new line for each string on a new line\n            for(var i$1 = 1; i$1 < newlineCount; i$1++){\n                normalizeEmptyLines(currentLine);\n                acc.push(currentLine = []);\n                currentLine.push({\n                    types: types,\n                    content: splitByNewlines[i$1]\n                });\n            }\n        } // Decreate the stack depth\n        stackIndex--;\n        typeArrStack.pop();\n        tokenArrStack.pop();\n        tokenArrIndexStack.pop();\n        tokenArrSizeStack.pop();\n    }\n    normalizeEmptyLines(currentLine);\n    return acc;\n};\nvar themeToDict = function(theme, language) {\n    var plain = theme.plain; // $FlowFixMe\n    var base = Object.create(null);\n    var themeDict = theme.styles.reduce(function(acc, themeEntry) {\n        var languages = themeEntry.languages;\n        var style = themeEntry.style;\n        if (languages && !languages.includes(language)) {\n            return acc;\n        }\n        themeEntry.types.forEach(function(type) {\n            // $FlowFixMe\n            var accStyle = _extends({}, acc[type], style);\n            acc[type] = accStyle;\n        });\n        return acc;\n    }, base); // $FlowFixMe\n    themeDict.root = plain; // $FlowFixMe\n    themeDict.plain = _extends({}, plain, {\n        backgroundColor: null\n    });\n    return themeDict;\n};\nfunction objectWithoutProperties(obj, exclude) {\n    var target = {};\n    for(var k in obj)if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n    return target;\n}\nvar Highlight = /*@__PURE__*/ function(Component) {\n    function Highlight() {\n        var this$1 = this;\n        var args = [], len = arguments.length;\n        while(len--)args[len] = arguments[len];\n        Component.apply(this, args);\n        _defineProperty(this, \"getThemeDict\", function(props) {\n            if (this$1.themeDict !== undefined && props.theme === this$1.prevTheme && props.language === this$1.prevLanguage) {\n                return this$1.themeDict;\n            }\n            this$1.prevTheme = props.theme;\n            this$1.prevLanguage = props.language;\n            var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n            return this$1.themeDict = themeDict;\n        });\n        _defineProperty(this, \"getLineProps\", function(ref) {\n            var key = ref.key;\n            var className = ref.className;\n            var style = ref.style;\n            var rest$1 = objectWithoutProperties(ref, [\n                \"key\",\n                \"className\",\n                \"style\",\n                \"line\"\n            ]);\n            var rest = rest$1;\n            var output = _extends({}, rest, {\n                className: \"token-line\",\n                style: undefined,\n                key: undefined\n            });\n            var themeDict = this$1.getThemeDict(this$1.props);\n            if (themeDict !== undefined) {\n                output.style = themeDict.plain;\n            }\n            if (style !== undefined) {\n                output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n            }\n            if (key !== undefined) {\n                output.key = key;\n            }\n            if (className) {\n                output.className += \" \" + className;\n            }\n            return output;\n        });\n        _defineProperty(this, \"getStyleForToken\", function(ref) {\n            var types = ref.types;\n            var empty = ref.empty;\n            var typesSize = types.length;\n            var themeDict = this$1.getThemeDict(this$1.props);\n            if (themeDict === undefined) {\n                return undefined;\n            } else if (typesSize === 1 && types[0] === \"plain\") {\n                return empty ? {\n                    display: \"inline-block\"\n                } : undefined;\n            } else if (typesSize === 1 && !empty) {\n                return themeDict[types[0]];\n            }\n            var baseStyle = empty ? {\n                display: \"inline-block\"\n            } : {}; // $FlowFixMe\n            var typeStyles = types.map(function(type) {\n                return themeDict[type];\n            });\n            return Object.assign.apply(Object, [\n                baseStyle\n            ].concat(typeStyles));\n        });\n        _defineProperty(this, \"getTokenProps\", function(ref) {\n            var key = ref.key;\n            var className = ref.className;\n            var style = ref.style;\n            var token = ref.token;\n            var rest$1 = objectWithoutProperties(ref, [\n                \"key\",\n                \"className\",\n                \"style\",\n                \"token\"\n            ]);\n            var rest = rest$1;\n            var output = _extends({}, rest, {\n                className: \"token \" + token.types.join(\" \"),\n                children: token.content,\n                style: this$1.getStyleForToken(token),\n                key: undefined\n            });\n            if (style !== undefined) {\n                output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n            }\n            if (key !== undefined) {\n                output.key = key;\n            }\n            if (className) {\n                output.className += \" \" + className;\n            }\n            return output;\n        });\n        _defineProperty(this, \"tokenize\", function(Prism, code, grammar, language) {\n            var env = {\n                code: code,\n                grammar: grammar,\n                language: language,\n                tokens: []\n            };\n            Prism.hooks.run(\"before-tokenize\", env);\n            var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);\n            Prism.hooks.run(\"after-tokenize\", env);\n            return tokens;\n        });\n    }\n    if (Component) Highlight.__proto__ = Component;\n    Highlight.prototype = Object.create(Component && Component.prototype);\n    Highlight.prototype.constructor = Highlight;\n    Highlight.prototype.render = function render() {\n        var ref = this.props;\n        var Prism = ref.Prism;\n        var language = ref.language;\n        var code = ref.code;\n        var children = ref.children;\n        var themeDict = this.getThemeDict(this.props);\n        var grammar = Prism.languages[language];\n        var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [\n            code\n        ];\n        var tokens = normalizeTokens(mixedTokens);\n        return children({\n            tokens: tokens,\n            className: \"prism-code language-\" + language,\n            style: themeDict !== undefined ? themeDict.root : {},\n            getLineProps: this.getLineProps,\n            getTokenProps: this.getTokenProps\n        });\n    };\n    return Highlight;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Highlight);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJpc20tcmVhY3QtcmVuZGVyZXJAMS4zLjVfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9wcmlzbS1yZWFjdC1yZW5kZXJlci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0M7QUFDZTtBQUNYO0FBQ1I7QUFFbEMsSUFBSUssZUFBZTtJQUNqQixhQUFhO0lBQ2JILE9BQU9GLHVEQUFLQTtJQUNaRyxPQUFPQSwyREFBS0E7QUFDZDtBQUVBLFNBQVNHLGdCQUFnQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEtBQUs7SUFDdEMsSUFBSUQsT0FBT0QsS0FBSztRQUNkRyxPQUFPQyxjQUFjLENBQUNKLEtBQUtDLEtBQUs7WUFDOUJDLE9BQU9BO1lBQ1BHLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1FBQ1o7SUFDRixPQUFPO1FBQ0xQLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztJQUNiO0lBRUEsT0FBT0Y7QUFDVDtBQUVBLFNBQVNRO0lBQ1BBLFdBQVdMLE9BQU9NLE1BQU0sSUFBSSxTQUFVQyxNQUFNO1FBQzFDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7WUFDekMsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBRXpCLElBQUssSUFBSVYsT0FBT2EsT0FBUTtnQkFDdEIsSUFBSVgsT0FBT1ksU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0gsUUFBUWIsTUFBTTtvQkFDckRTLE1BQU0sQ0FBQ1QsSUFBSSxHQUFHYSxNQUFNLENBQUNiLElBQUk7Z0JBQzNCO1lBQ0Y7UUFDRjtRQUVBLE9BQU9TO0lBQ1Q7SUFFQSxPQUFPRixTQUFTVSxLQUFLLENBQUMsSUFBSSxFQUFFTjtBQUM5QjtBQUVBLElBQUlPLFlBQVksY0FBYyxpRkFBaUY7QUFFL0csSUFBSUMsc0JBQXNCLFNBQVVDLElBQUk7SUFDdEMsSUFBSUEsS0FBS1IsTUFBTSxLQUFLLEdBQUc7UUFDckJRLEtBQUtDLElBQUksQ0FBQztZQUNSQyxPQUFPO2dCQUFDO2FBQVE7WUFDaEJDLFNBQVM7WUFDVEMsT0FBTztRQUNUO0lBQ0YsT0FBTyxJQUFJSixLQUFLUixNQUFNLEtBQUssS0FBS1EsSUFBSSxDQUFDLEVBQUUsQ0FBQ0csT0FBTyxLQUFLLElBQUk7UUFDdERILElBQUksQ0FBQyxFQUFFLENBQUNHLE9BQU8sR0FBRztRQUNsQkgsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksS0FBSyxHQUFHO0lBQ2xCO0FBQ0Y7QUFFQSxJQUFJQyxjQUFjLFNBQVVILEtBQUssRUFBRUksR0FBRztJQUNwQyxJQUFJQyxZQUFZTCxNQUFNVixNQUFNO0lBRTVCLElBQUllLFlBQVksS0FBS0wsS0FBSyxDQUFDSyxZQUFZLEVBQUUsS0FBS0QsS0FBSztRQUNqRCxPQUFPSjtJQUNUO0lBRUEsT0FBT0EsTUFBTU0sTUFBTSxDQUFDRjtBQUN0QixHQUFHLDBFQUEwRTtBQUM3RSwwRUFBMEU7QUFDMUUsNkVBQTZFO0FBQzdFLDhCQUE4QjtBQUM5QixvRkFBb0Y7QUFDcEYsdUNBQXVDO0FBR3ZDLElBQUlHLGtCQUFrQixTQUFVQyxNQUFNO0lBQ3BDLElBQUlDLGVBQWU7UUFBQyxFQUFFO0tBQUM7SUFDdkIsSUFBSUMsZ0JBQWdCO1FBQUNGO0tBQU87SUFDNUIsSUFBSUcscUJBQXFCO1FBQUM7S0FBRTtJQUM1QixJQUFJQyxvQkFBb0I7UUFBQ0osT0FBT2xCLE1BQU07S0FBQztJQUN2QyxJQUFJRixJQUFJO0lBQ1IsSUFBSXlCLGFBQWE7SUFDakIsSUFBSUMsY0FBYyxFQUFFO0lBQ3BCLElBQUlDLE1BQU07UUFBQ0Q7S0FBWTtJQUV2QixNQUFPRCxhQUFhLENBQUMsRUFBRztRQUN0QixNQUFPLENBQUN6QixJQUFJdUIsa0JBQWtCLENBQUNFLFdBQVcsRUFBQyxJQUFLRCxpQkFBaUIsQ0FBQ0MsV0FBVyxDQUFFO1lBQzdFLElBQUlaLFVBQVUsS0FBSztZQUNuQixJQUFJRCxRQUFRUyxZQUFZLENBQUNJLFdBQVc7WUFDcEMsSUFBSUcsV0FBV04sYUFBYSxDQUFDRyxXQUFXO1lBQ3hDLElBQUlJLFFBQVFELFFBQVEsQ0FBQzVCLEVBQUUsRUFBRSwwREFBMEQ7WUFFbkYsSUFBSSxPQUFPNkIsVUFBVSxVQUFVO2dCQUM3QmpCLFFBQVFhLGFBQWEsSUFBSWIsUUFBUTtvQkFBQztpQkFBUTtnQkFDMUNDLFVBQVVnQjtZQUNaLE9BQU87Z0JBQ0xqQixRQUFRRyxZQUFZSCxPQUFPaUIsTUFBTUMsSUFBSTtnQkFFckMsSUFBSUQsTUFBTUUsS0FBSyxFQUFFO29CQUNmbkIsUUFBUUcsWUFBWUgsT0FBT2lCLE1BQU1FLEtBQUs7Z0JBQ3hDO2dCQUVBbEIsVUFBVWdCLE1BQU1oQixPQUFPO1lBQ3pCLEVBQUUsb0ZBQW9GO1lBR3RGLElBQUksT0FBT0EsWUFBWSxVQUFVO2dCQUMvQlk7Z0JBQ0FKLGFBQWFWLElBQUksQ0FBQ0M7Z0JBQ2xCVSxjQUFjWCxJQUFJLENBQUNFO2dCQUNuQlUsbUJBQW1CWixJQUFJLENBQUM7Z0JBQ3hCYSxrQkFBa0JiLElBQUksQ0FBQ0UsUUFBUVgsTUFBTTtnQkFDckM7WUFDRixFQUFFLG9CQUFvQjtZQUd0QixJQUFJOEIsa0JBQWtCbkIsUUFBUW9CLEtBQUssQ0FBQ3pCO1lBQ3BDLElBQUkwQixlQUFlRixnQkFBZ0I5QixNQUFNO1lBQ3pDd0IsWUFBWWYsSUFBSSxDQUFDO2dCQUNmQyxPQUFPQTtnQkFDUEMsU0FBU21CLGVBQWUsQ0FBQyxFQUFFO1lBQzdCLElBQUksa0RBQWtEO1lBRXRELElBQUssSUFBSUcsTUFBTSxHQUFHQSxNQUFNRCxjQUFjQyxNQUFPO2dCQUMzQzFCLG9CQUFvQmlCO2dCQUNwQkMsSUFBSWhCLElBQUksQ0FBQ2UsY0FBYyxFQUFFO2dCQUN6QkEsWUFBWWYsSUFBSSxDQUFDO29CQUNmQyxPQUFPQTtvQkFDUEMsU0FBU21CLGVBQWUsQ0FBQ0csSUFBSTtnQkFDL0I7WUFDRjtRQUNGLEVBQUUsMkJBQTJCO1FBRzdCVjtRQUNBSixhQUFhZSxHQUFHO1FBQ2hCZCxjQUFjYyxHQUFHO1FBQ2pCYixtQkFBbUJhLEdBQUc7UUFDdEJaLGtCQUFrQlksR0FBRztJQUN2QjtJQUVBM0Isb0JBQW9CaUI7SUFDcEIsT0FBT0M7QUFDVDtBQUVBLElBQUlVLGNBQWMsU0FBVXBELEtBQUssRUFBRXFELFFBQVE7SUFDekMsSUFBSUMsUUFBUXRELE1BQU1zRCxLQUFLLEVBQUUsYUFBYTtJQUV0QyxJQUFJQyxPQUFPaEQsT0FBT2lELE1BQU0sQ0FBQztJQUN6QixJQUFJQyxZQUFZekQsTUFBTTBELE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLFNBQVVqQixHQUFHLEVBQUVrQixVQUFVO1FBQzNELElBQUlDLFlBQVlELFdBQVdDLFNBQVM7UUFDcEMsSUFBSUMsUUFBUUYsV0FBV0UsS0FBSztRQUU1QixJQUFJRCxhQUFhLENBQUNBLFVBQVVFLFFBQVEsQ0FBQ1YsV0FBVztZQUM5QyxPQUFPWDtRQUNUO1FBRUFrQixXQUFXakMsS0FBSyxDQUFDcUMsT0FBTyxDQUFDLFNBQVVuQixJQUFJO1lBQ3JDLGFBQWE7WUFDYixJQUFJb0IsV0FBV3JELFNBQVMsQ0FBQyxHQUFHOEIsR0FBRyxDQUFDRyxLQUFLLEVBQUVpQjtZQUV2Q3BCLEdBQUcsQ0FBQ0csS0FBSyxHQUFHb0I7UUFDZDtRQUNBLE9BQU92QjtJQUNULEdBQUdhLE9BQU8sYUFBYTtJQUV2QkUsVUFBVVMsSUFBSSxHQUFHWixPQUFPLGFBQWE7SUFFckNHLFVBQVVILEtBQUssR0FBRzFDLFNBQVMsQ0FBQyxHQUFHMEMsT0FBTztRQUNwQ2EsaUJBQWlCO0lBQ25CO0lBQ0EsT0FBT1Y7QUFDVDtBQUVBLFNBQVNXLHdCQUF3QmhFLEdBQUcsRUFBRWlFLE9BQU87SUFDM0MsSUFBSXZELFNBQVMsQ0FBQztJQUVkLElBQUssSUFBSXdELEtBQUtsRSxJQUFLLElBQUlHLE9BQU9ZLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNqQixLQUFLa0UsTUFBTUQsUUFBUUUsT0FBTyxDQUFDRCxPQUFPLENBQUMsR0FBR3hELE1BQU0sQ0FBQ3dELEVBQUUsR0FBR2xFLEdBQUcsQ0FBQ2tFLEVBQUU7SUFFcEgsT0FBT3hEO0FBQ1Q7QUFFQSxJQUFJMEQsWUFBWSxXQUFXLEdBQUUsU0FBVXZFLFNBQVM7SUFDOUMsU0FBU3VFO1FBQ1AsSUFBSUMsU0FBUyxJQUFJO1FBQ2pCLElBQUlDLE9BQU8sRUFBRSxFQUNUQyxNQUFNM0QsVUFBVUMsTUFBTTtRQUUxQixNQUFPMEQsTUFBT0QsSUFBSSxDQUFDQyxJQUFJLEdBQUczRCxTQUFTLENBQUMyRCxJQUFJO1FBRXhDMUUsVUFBVXFCLEtBQUssQ0FBQyxJQUFJLEVBQUVvRDtRQUV0QnZFLGdCQUFnQixJQUFJLEVBQUUsZ0JBQWdCLFNBQVV5RSxLQUFLO1lBQ25ELElBQUlILE9BQU9oQixTQUFTLEtBQUtvQixhQUFhRCxNQUFNNUUsS0FBSyxLQUFLeUUsT0FBT0ssU0FBUyxJQUFJRixNQUFNdkIsUUFBUSxLQUFLb0IsT0FBT00sWUFBWSxFQUFFO2dCQUNoSCxPQUFPTixPQUFPaEIsU0FBUztZQUN6QjtZQUVBZ0IsT0FBT0ssU0FBUyxHQUFHRixNQUFNNUUsS0FBSztZQUM5QnlFLE9BQU9NLFlBQVksR0FBR0gsTUFBTXZCLFFBQVE7WUFDcEMsSUFBSUksWUFBWW1CLE1BQU01RSxLQUFLLEdBQUdvRCxZQUFZd0IsTUFBTTVFLEtBQUssRUFBRTRFLE1BQU12QixRQUFRLElBQUl3QjtZQUN6RSxPQUFPSixPQUFPaEIsU0FBUyxHQUFHQTtRQUM1QjtRQUVBdEQsZ0JBQWdCLElBQUksRUFBRSxnQkFBZ0IsU0FBVTZFLEdBQUc7WUFDakQsSUFBSTNFLE1BQU0yRSxJQUFJM0UsR0FBRztZQUNqQixJQUFJNEUsWUFBWUQsSUFBSUMsU0FBUztZQUM3QixJQUFJbkIsUUFBUWtCLElBQUlsQixLQUFLO1lBQ3JCLElBQUlvQixTQUFTZCx3QkFBd0JZLEtBQUs7Z0JBQUM7Z0JBQU87Z0JBQWE7Z0JBQVM7YUFBTztZQUMvRSxJQUFJRyxPQUFPRDtZQUVYLElBQUlFLFNBQVN4RSxTQUFTLENBQUMsR0FBR3VFLE1BQU07Z0JBQzlCRixXQUFXO2dCQUNYbkIsT0FBT2U7Z0JBQ1B4RSxLQUFLd0U7WUFDUDtZQUVBLElBQUlwQixZQUFZZ0IsT0FBT1ksWUFBWSxDQUFDWixPQUFPRyxLQUFLO1lBRWhELElBQUluQixjQUFjb0IsV0FBVztnQkFDM0JPLE9BQU90QixLQUFLLEdBQUdMLFVBQVVILEtBQUs7WUFDaEM7WUFFQSxJQUFJUSxVQUFVZSxXQUFXO2dCQUN2Qk8sT0FBT3RCLEtBQUssR0FBR3NCLE9BQU90QixLQUFLLEtBQUtlLFlBQVlqRSxTQUFTLENBQUMsR0FBR3dFLE9BQU90QixLQUFLLEVBQUVBLFNBQVNBO1lBQ2xGO1lBRUEsSUFBSXpELFFBQVF3RSxXQUFXO2dCQUNyQk8sT0FBTy9FLEdBQUcsR0FBR0E7WUFDZjtZQUVBLElBQUk0RSxXQUFXO2dCQUNiRyxPQUFPSCxTQUFTLElBQUksTUFBTUE7WUFDNUI7WUFFQSxPQUFPRztRQUNUO1FBRUFqRixnQkFBZ0IsSUFBSSxFQUFFLG9CQUFvQixTQUFVNkUsR0FBRztZQUNyRCxJQUFJckQsUUFBUXFELElBQUlyRCxLQUFLO1lBQ3JCLElBQUlFLFFBQVFtRCxJQUFJbkQsS0FBSztZQUNyQixJQUFJRyxZQUFZTCxNQUFNVixNQUFNO1lBQzVCLElBQUl3QyxZQUFZZ0IsT0FBT1ksWUFBWSxDQUFDWixPQUFPRyxLQUFLO1lBRWhELElBQUluQixjQUFjb0IsV0FBVztnQkFDM0IsT0FBT0E7WUFDVCxPQUFPLElBQUk3QyxjQUFjLEtBQUtMLEtBQUssQ0FBQyxFQUFFLEtBQUssU0FBUztnQkFDbEQsT0FBT0UsUUFBUTtvQkFDYnlELFNBQVM7Z0JBQ1gsSUFBSVQ7WUFDTixPQUFPLElBQUk3QyxjQUFjLEtBQUssQ0FBQ0gsT0FBTztnQkFDcEMsT0FBTzRCLFNBQVMsQ0FBQzlCLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDNUI7WUFFQSxJQUFJNEQsWUFBWTFELFFBQVE7Z0JBQ3RCeUQsU0FBUztZQUNYLElBQUksQ0FBQyxHQUFHLGFBQWE7WUFFckIsSUFBSUUsYUFBYTdELE1BQU04RCxHQUFHLENBQUMsU0FBVTVDLElBQUk7Z0JBQ3ZDLE9BQU9ZLFNBQVMsQ0FBQ1osS0FBSztZQUN4QjtZQUNBLE9BQU90QyxPQUFPTSxNQUFNLENBQUNTLEtBQUssQ0FBQ2YsUUFBUTtnQkFBQ2dGO2FBQVUsQ0FBQ3RELE1BQU0sQ0FBQ3VEO1FBQ3hEO1FBRUFyRixnQkFBZ0IsSUFBSSxFQUFFLGlCQUFpQixTQUFVNkUsR0FBRztZQUNsRCxJQUFJM0UsTUFBTTJFLElBQUkzRSxHQUFHO1lBQ2pCLElBQUk0RSxZQUFZRCxJQUFJQyxTQUFTO1lBQzdCLElBQUluQixRQUFRa0IsSUFBSWxCLEtBQUs7WUFDckIsSUFBSWxCLFFBQVFvQyxJQUFJcEMsS0FBSztZQUNyQixJQUFJc0MsU0FBU2Qsd0JBQXdCWSxLQUFLO2dCQUFDO2dCQUFPO2dCQUFhO2dCQUFTO2FBQVE7WUFDaEYsSUFBSUcsT0FBT0Q7WUFFWCxJQUFJRSxTQUFTeEUsU0FBUyxDQUFDLEdBQUd1RSxNQUFNO2dCQUM5QkYsV0FBVyxXQUFXckMsTUFBTWpCLEtBQUssQ0FBQytELElBQUksQ0FBQztnQkFDdkNDLFVBQVUvQyxNQUFNaEIsT0FBTztnQkFDdkJrQyxPQUFPVyxPQUFPbUIsZ0JBQWdCLENBQUNoRDtnQkFDL0J2QyxLQUFLd0U7WUFDUDtZQUVBLElBQUlmLFVBQVVlLFdBQVc7Z0JBQ3ZCTyxPQUFPdEIsS0FBSyxHQUFHc0IsT0FBT3RCLEtBQUssS0FBS2UsWUFBWWpFLFNBQVMsQ0FBQyxHQUFHd0UsT0FBT3RCLEtBQUssRUFBRUEsU0FBU0E7WUFDbEY7WUFFQSxJQUFJekQsUUFBUXdFLFdBQVc7Z0JBQ3JCTyxPQUFPL0UsR0FBRyxHQUFHQTtZQUNmO1lBRUEsSUFBSTRFLFdBQVc7Z0JBQ2JHLE9BQU9ILFNBQVMsSUFBSSxNQUFNQTtZQUM1QjtZQUVBLE9BQU9HO1FBQ1Q7UUFFQWpGLGdCQUFnQixJQUFJLEVBQUUsWUFBWSxTQUFVSixLQUFLLEVBQUU4RixJQUFJLEVBQUVDLE9BQU8sRUFBRXpDLFFBQVE7WUFDeEUsSUFBSTBDLE1BQU07Z0JBQ1JGLE1BQU1BO2dCQUNOQyxTQUFTQTtnQkFDVHpDLFVBQVVBO2dCQUNWbEIsUUFBUSxFQUFFO1lBQ1o7WUFDQXBDLE1BQU1pRyxLQUFLLENBQUNDLEdBQUcsQ0FBQyxtQkFBbUJGO1lBQ25DLElBQUk1RCxTQUFTNEQsSUFBSTVELE1BQU0sR0FBR3BDLE1BQU1tRyxRQUFRLENBQUNILElBQUlGLElBQUksRUFBRUUsSUFBSUQsT0FBTyxFQUFFQyxJQUFJMUMsUUFBUTtZQUM1RXRELE1BQU1pRyxLQUFLLENBQUNDLEdBQUcsQ0FBQyxrQkFBa0JGO1lBQ2xDLE9BQU81RDtRQUNUO0lBQ0Y7SUFFQSxJQUFJbEMsV0FBV3VFLFVBQVUyQixTQUFTLEdBQUdsRztJQUNyQ3VFLFVBQVVyRCxTQUFTLEdBQUdaLE9BQU9pRCxNQUFNLENBQUN2RCxhQUFhQSxVQUFVa0IsU0FBUztJQUNwRXFELFVBQVVyRCxTQUFTLENBQUNpRixXQUFXLEdBQUc1QjtJQUVsQ0EsVUFBVXJELFNBQVMsQ0FBQ2tGLE1BQU0sR0FBRyxTQUFTQTtRQUNwQyxJQUFJckIsTUFBTSxJQUFJLENBQUNKLEtBQUs7UUFDcEIsSUFBSTdFLFFBQVFpRixJQUFJakYsS0FBSztRQUNyQixJQUFJc0QsV0FBVzJCLElBQUkzQixRQUFRO1FBQzNCLElBQUl3QyxPQUFPYixJQUFJYSxJQUFJO1FBQ25CLElBQUlGLFdBQVdYLElBQUlXLFFBQVE7UUFDM0IsSUFBSWxDLFlBQVksSUFBSSxDQUFDNEIsWUFBWSxDQUFDLElBQUksQ0FBQ1QsS0FBSztRQUM1QyxJQUFJa0IsVUFBVS9GLE1BQU04RCxTQUFTLENBQUNSLFNBQVM7UUFDdkMsSUFBSWlELGNBQWNSLFlBQVlqQixZQUFZLElBQUksQ0FBQ3FCLFFBQVEsQ0FBQ25HLE9BQU84RixNQUFNQyxTQUFTekMsWUFBWTtZQUFDd0M7U0FBSztRQUNoRyxJQUFJMUQsU0FBU0QsZ0JBQWdCb0U7UUFDN0IsT0FBT1gsU0FBUztZQUNkeEQsUUFBUUE7WUFDUjhDLFdBQVcseUJBQXlCNUI7WUFDcENTLE9BQU9MLGNBQWNvQixZQUFZcEIsVUFBVVMsSUFBSSxHQUFHLENBQUM7WUFDbkRxQyxjQUFjLElBQUksQ0FBQ0EsWUFBWTtZQUMvQkMsZUFBZSxJQUFJLENBQUNBLGFBQWE7UUFDbkM7SUFDRjtJQUVBLE9BQU9oQztBQUNULEVBQUV2RSw0Q0FBU0E7QUFFWCxpRUFBZXVFLFNBQVNBLEVBQUM7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWVtYWlsLWNsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcmlzbS1yZWFjdC1yZW5kZXJlckAxLjMuNV9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL3ByaXNtLXJlYWN0LXJlbmRlcmVyL2Rpc3QvaW5kZXguanM/Y2IwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcHJpc20gZnJvbSAnLi4vcHJpc20vaW5kZXguanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBQcmlzbSB9IGZyb20gJy4uL3ByaXNtL2luZGV4LmpzJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi90aGVtZXMvZHVvdG9uZURhcmsnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyAkRmxvd0ZpeE1lXG4gIFByaXNtOiBwcmlzbSxcbiAgdGhlbWU6IHRoZW1lXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIG5ld2xpbmVSZSA9IC9cXHJcXG58XFxyfFxcbi87IC8vIEVtcHR5IGxpbmVzIG5lZWQgdG8gY29udGFpbiBhIHNpbmdsZSBlbXB0eSB0b2tlbiwgZGVub3RlZCB3aXRoIHsgZW1wdHk6IHRydWUgfVxuXG52YXIgbm9ybWFsaXplRW1wdHlMaW5lcyA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgIGxpbmUucHVzaCh7XG4gICAgICB0eXBlczogW1wicGxhaW5cIl0sXG4gICAgICBjb250ZW50OiBcIlxcblwiLFxuICAgICAgZW1wdHk6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChsaW5lLmxlbmd0aCA9PT0gMSAmJiBsaW5lWzBdLmNvbnRlbnQgPT09IFwiXCIpIHtcbiAgICBsaW5lWzBdLmNvbnRlbnQgPSBcIlxcblwiO1xuICAgIGxpbmVbMF0uZW1wdHkgPSB0cnVlO1xuICB9XG59O1xuXG52YXIgYXBwZW5kVHlwZXMgPSBmdW5jdGlvbiAodHlwZXMsIGFkZCkge1xuICB2YXIgdHlwZXNTaXplID0gdHlwZXMubGVuZ3RoO1xuXG4gIGlmICh0eXBlc1NpemUgPiAwICYmIHR5cGVzW3R5cGVzU2l6ZSAtIDFdID09PSBhZGQpIHtcbiAgICByZXR1cm4gdHlwZXM7XG4gIH1cblxuICByZXR1cm4gdHlwZXMuY29uY2F0KGFkZCk7XG59OyAvLyBUYWtlcyBhbiBhcnJheSBvZiBQcmlzbSdzIHRva2VucyBhbmQgZ3JvdXBzIHRoZW0gYnkgbGluZSwgdHVybmluZyBwbGFpblxuLy8gc3RyaW5ncyBpbnRvIHRva2VucyBhcyB3ZWxsLiBUb2tlbnMgY2FuIGJlY29tZSByZWN1cnNpdmUgaW4gc29tZSBjYXNlcyxcbi8vIHdoaWNoIG1lYW5zIHRoYXQgdGhlaXIgdHlwZXMgYXJlIGNvbmNhdGVuYXRlZC4gUGxhaW4tc3RyaW5nIHRva2VucyBob3dldmVyXG4vLyBhcmUgYWx3YXlzIG9mIHR5cGUgXCJwbGFpblwiLlxuLy8gVGhpcyBpcyBub3QgcmVjdXJzaXZlIHRvIGF2b2lkIGV4Y2VlZGluZyB0aGUgY2FsbC1zdGFjayBsaW1pdCwgc2luY2UgaXQncyB1bmNsZWFyXG4vLyBob3cgbmVzdGVkIFByaXNtJ3MgdG9rZW5zIGNhbiBiZWNvbWVcblxuXG52YXIgbm9ybWFsaXplVG9rZW5zID0gZnVuY3Rpb24gKHRva2Vucykge1xuICB2YXIgdHlwZUFyclN0YWNrID0gW1tdXTtcbiAgdmFyIHRva2VuQXJyU3RhY2sgPSBbdG9rZW5zXTtcbiAgdmFyIHRva2VuQXJySW5kZXhTdGFjayA9IFswXTtcbiAgdmFyIHRva2VuQXJyU2l6ZVN0YWNrID0gW3Rva2Vucy5sZW5ndGhdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzdGFja0luZGV4ID0gMDtcbiAgdmFyIGN1cnJlbnRMaW5lID0gW107XG4gIHZhciBhY2MgPSBbY3VycmVudExpbmVdO1xuXG4gIHdoaWxlIChzdGFja0luZGV4ID4gLTEpIHtcbiAgICB3aGlsZSAoKGkgPSB0b2tlbkFyckluZGV4U3RhY2tbc3RhY2tJbmRleF0rKykgPCB0b2tlbkFyclNpemVTdGFja1tzdGFja0luZGV4XSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSB2b2lkIDA7XG4gICAgICB2YXIgdHlwZXMgPSB0eXBlQXJyU3RhY2tbc3RhY2tJbmRleF07XG4gICAgICB2YXIgdG9rZW5BcnIgPSB0b2tlbkFyclN0YWNrW3N0YWNrSW5kZXhdO1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5BcnJbaV07IC8vIERldGVybWluZSBjb250ZW50IGFuZCBhcHBlbmQgdHlwZSB0byB0eXBlcyBpZiBuZWNlc3NhcnlcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0eXBlcyA9IHN0YWNrSW5kZXggPiAwID8gdHlwZXMgOiBbXCJwbGFpblwiXTtcbiAgICAgICAgY29udGVudCA9IHRva2VuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHlwZXMgPSBhcHBlbmRUeXBlcyh0eXBlcywgdG9rZW4udHlwZSk7XG5cbiAgICAgICAgaWYgKHRva2VuLmFsaWFzKSB7XG4gICAgICAgICAgdHlwZXMgPSBhcHBlbmRUeXBlcyh0eXBlcywgdG9rZW4uYWxpYXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGVudCA9IHRva2VuLmNvbnRlbnQ7XG4gICAgICB9IC8vIElmIHRva2VuLmNvbnRlbnQgaXMgYW4gYXJyYXksIGluY3JlYXNlIHRoZSBzdGFjayBkZXB0aCBhbmQgcmVwZWF0IHRoaXMgd2hpbGUtbG9vcFxuXG5cbiAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBzdGFja0luZGV4Kys7XG4gICAgICAgIHR5cGVBcnJTdGFjay5wdXNoKHR5cGVzKTtcbiAgICAgICAgdG9rZW5BcnJTdGFjay5wdXNoKGNvbnRlbnQpO1xuICAgICAgICB0b2tlbkFyckluZGV4U3RhY2sucHVzaCgwKTtcbiAgICAgICAgdG9rZW5BcnJTaXplU3RhY2sucHVzaChjb250ZW50Lmxlbmd0aCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBTcGxpdCBieSBuZXdsaW5lc1xuXG5cbiAgICAgIHZhciBzcGxpdEJ5TmV3bGluZXMgPSBjb250ZW50LnNwbGl0KG5ld2xpbmVSZSk7XG4gICAgICB2YXIgbmV3bGluZUNvdW50ID0gc3BsaXRCeU5ld2xpbmVzLmxlbmd0aDtcbiAgICAgIGN1cnJlbnRMaW5lLnB1c2goe1xuICAgICAgICB0eXBlczogdHlwZXMsXG4gICAgICAgIGNvbnRlbnQ6IHNwbGl0QnlOZXdsaW5lc1swXVxuICAgICAgfSk7IC8vIENyZWF0ZSBhIG5ldyBsaW5lIGZvciBlYWNoIHN0cmluZyBvbiBhIG5ldyBsaW5lXG5cbiAgICAgIGZvciAodmFyIGkkMSA9IDE7IGkkMSA8IG5ld2xpbmVDb3VudDsgaSQxKyspIHtcbiAgICAgICAgbm9ybWFsaXplRW1wdHlMaW5lcyhjdXJyZW50TGluZSk7XG4gICAgICAgIGFjYy5wdXNoKGN1cnJlbnRMaW5lID0gW10pO1xuICAgICAgICBjdXJyZW50TGluZS5wdXNoKHtcbiAgICAgICAgICB0eXBlczogdHlwZXMsXG4gICAgICAgICAgY29udGVudDogc3BsaXRCeU5ld2xpbmVzW2kkMV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSAvLyBEZWNyZWF0ZSB0aGUgc3RhY2sgZGVwdGhcblxuXG4gICAgc3RhY2tJbmRleC0tO1xuICAgIHR5cGVBcnJTdGFjay5wb3AoKTtcbiAgICB0b2tlbkFyclN0YWNrLnBvcCgpO1xuICAgIHRva2VuQXJySW5kZXhTdGFjay5wb3AoKTtcbiAgICB0b2tlbkFyclNpemVTdGFjay5wb3AoKTtcbiAgfVxuXG4gIG5vcm1hbGl6ZUVtcHR5TGluZXMoY3VycmVudExpbmUpO1xuICByZXR1cm4gYWNjO1xufTtcblxudmFyIHRoZW1lVG9EaWN0ID0gZnVuY3Rpb24gKHRoZW1lLCBsYW5ndWFnZSkge1xuICB2YXIgcGxhaW4gPSB0aGVtZS5wbGFpbjsgLy8gJEZsb3dGaXhNZVxuXG4gIHZhciBiYXNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHRoZW1lRGljdCA9IHRoZW1lLnN0eWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdGhlbWVFbnRyeSkge1xuICAgIHZhciBsYW5ndWFnZXMgPSB0aGVtZUVudHJ5Lmxhbmd1YWdlcztcbiAgICB2YXIgc3R5bGUgPSB0aGVtZUVudHJ5LnN0eWxlO1xuXG4gICAgaWYgKGxhbmd1YWdlcyAmJiAhbGFuZ3VhZ2VzLmluY2x1ZGVzKGxhbmd1YWdlKSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICB0aGVtZUVudHJ5LnR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHZhciBhY2NTdHlsZSA9IF9leHRlbmRzKHt9LCBhY2NbdHlwZV0sIHN0eWxlKTtcblxuICAgICAgYWNjW3R5cGVdID0gYWNjU3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgYmFzZSk7IC8vICRGbG93Rml4TWVcblxuICB0aGVtZURpY3Qucm9vdCA9IHBsYWluOyAvLyAkRmxvd0ZpeE1lXG5cbiAgdGhlbWVEaWN0LnBsYWluID0gX2V4dGVuZHMoe30sIHBsYWluLCB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhlbWVEaWN0O1xufTtcblxuZnVuY3Rpb24gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBrIGluIG9iaikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGspICYmIGV4Y2x1ZGUuaW5kZXhPZihrKSA9PT0gLTEpIHRhcmdldFtrXSA9IG9ialtrXTtcblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgSGlnaGxpZ2h0ID0gLypAX19QVVJFX18qL2Z1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgZnVuY3Rpb24gSGlnaGxpZ2h0KCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuLS0pIGFyZ3NbbGVuXSA9IGFyZ3VtZW50c1tsZW5dO1xuXG4gICAgQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3MpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0VGhlbWVEaWN0XCIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgaWYgKHRoaXMkMS50aGVtZURpY3QgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy50aGVtZSA9PT0gdGhpcyQxLnByZXZUaGVtZSAmJiBwcm9wcy5sYW5ndWFnZSA9PT0gdGhpcyQxLnByZXZMYW5ndWFnZSkge1xuICAgICAgICByZXR1cm4gdGhpcyQxLnRoZW1lRGljdDtcbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnByZXZUaGVtZSA9IHByb3BzLnRoZW1lO1xuICAgICAgdGhpcyQxLnByZXZMYW5ndWFnZSA9IHByb3BzLmxhbmd1YWdlO1xuICAgICAgdmFyIHRoZW1lRGljdCA9IHByb3BzLnRoZW1lID8gdGhlbWVUb0RpY3QocHJvcHMudGhlbWUsIHByb3BzLmxhbmd1YWdlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0aGlzJDEudGhlbWVEaWN0ID0gdGhlbWVEaWN0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0TGluZVByb3BzXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHJlZi5jbGFzc05hbWU7XG4gICAgICB2YXIgc3R5bGUgPSByZWYuc3R5bGU7XG4gICAgICB2YXIgcmVzdCQxID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocmVmLCBbXCJrZXlcIiwgXCJjbGFzc05hbWVcIiwgXCJzdHlsZVwiLCBcImxpbmVcIl0pO1xuICAgICAgdmFyIHJlc3QgPSByZXN0JDE7XG5cbiAgICAgIHZhciBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IFwidG9rZW4tbGluZVwiLFxuICAgICAgICBzdHlsZTogdW5kZWZpbmVkLFxuICAgICAgICBrZXk6IHVuZGVmaW5lZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0aGVtZURpY3QgPSB0aGlzJDEuZ2V0VGhlbWVEaWN0KHRoaXMkMS5wcm9wcyk7XG5cbiAgICAgIGlmICh0aGVtZURpY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRwdXQuc3R5bGUgPSB0aGVtZURpY3QucGxhaW47XG4gICAgICB9XG5cbiAgICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG91dHB1dC5zdHlsZSA9IG91dHB1dC5zdHlsZSAhPT0gdW5kZWZpbmVkID8gX2V4dGVuZHMoe30sIG91dHB1dC5zdHlsZSwgc3R5bGUpIDogc3R5bGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRwdXQua2V5ID0ga2V5O1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIG91dHB1dC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXRTdHlsZUZvclRva2VuXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHZhciB0eXBlcyA9IHJlZi50eXBlcztcbiAgICAgIHZhciBlbXB0eSA9IHJlZi5lbXB0eTtcbiAgICAgIHZhciB0eXBlc1NpemUgPSB0eXBlcy5sZW5ndGg7XG4gICAgICB2YXIgdGhlbWVEaWN0ID0gdGhpcyQxLmdldFRoZW1lRGljdCh0aGlzJDEucHJvcHMpO1xuXG4gICAgICBpZiAodGhlbWVEaWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZXNTaXplID09PSAxICYmIHR5cGVzWzBdID09PSBcInBsYWluXCIpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5ID8ge1xuICAgICAgICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJcbiAgICAgICAgfSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZXNTaXplID09PSAxICYmICFlbXB0eSkge1xuICAgICAgICByZXR1cm4gdGhlbWVEaWN0W3R5cGVzWzBdXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJhc2VTdHlsZSA9IGVtcHR5ID8ge1xuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiXG4gICAgICB9IDoge307IC8vICRGbG93Rml4TWVcblxuICAgICAgdmFyIHR5cGVTdHlsZXMgPSB0eXBlcy5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoZW1lRGljdFt0eXBlXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBbYmFzZVN0eWxlXS5jb25jYXQodHlwZVN0eWxlcykpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0VG9rZW5Qcm9wc1wiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSByZWYuY2xhc3NOYW1lO1xuICAgICAgdmFyIHN0eWxlID0gcmVmLnN0eWxlO1xuICAgICAgdmFyIHRva2VuID0gcmVmLnRva2VuO1xuICAgICAgdmFyIHJlc3QkMSA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHJlZiwgW1wia2V5XCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJ0b2tlblwiXSk7XG4gICAgICB2YXIgcmVzdCA9IHJlc3QkMTtcblxuICAgICAgdmFyIG91dHB1dCA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICAgIGNsYXNzTmFtZTogXCJ0b2tlbiBcIiArIHRva2VuLnR5cGVzLmpvaW4oXCIgXCIpLFxuICAgICAgICBjaGlsZHJlbjogdG9rZW4uY29udGVudCxcbiAgICAgICAgc3R5bGU6IHRoaXMkMS5nZXRTdHlsZUZvclRva2VuKHRva2VuKSxcbiAgICAgICAga2V5OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRwdXQuc3R5bGUgPSBvdXRwdXQuc3R5bGUgIT09IHVuZGVmaW5lZCA/IF9leHRlbmRzKHt9LCBvdXRwdXQuc3R5bGUsIHN0eWxlKSA6IHN0eWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0LmtleSA9IGtleTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICBvdXRwdXQuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidG9rZW5pemVcIiwgZnVuY3Rpb24gKFByaXNtLCBjb2RlLCBncmFtbWFyLCBsYW5ndWFnZSkge1xuICAgICAgdmFyIGVudiA9IHtcbiAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgZ3JhbW1hcjogZ3JhbW1hcixcbiAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlLFxuICAgICAgICB0b2tlbnM6IFtdXG4gICAgICB9O1xuICAgICAgUHJpc20uaG9va3MucnVuKFwiYmVmb3JlLXRva2VuaXplXCIsIGVudik7XG4gICAgICB2YXIgdG9rZW5zID0gZW52LnRva2VucyA9IFByaXNtLnRva2VuaXplKGVudi5jb2RlLCBlbnYuZ3JhbW1hciwgZW52Lmxhbmd1YWdlKTtcbiAgICAgIFByaXNtLmhvb2tzLnJ1bihcImFmdGVyLXRva2VuaXplXCIsIGVudik7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKENvbXBvbmVudCkgSGlnaGxpZ2h0Ll9fcHJvdG9fXyA9IENvbXBvbmVudDtcbiAgSGlnaGxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29tcG9uZW50ICYmIENvbXBvbmVudC5wcm90b3R5cGUpO1xuICBIaWdobGlnaHQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGlnaGxpZ2h0O1xuXG4gIEhpZ2hsaWdodC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByZWYgPSB0aGlzLnByb3BzO1xuICAgIHZhciBQcmlzbSA9IHJlZi5QcmlzbTtcbiAgICB2YXIgbGFuZ3VhZ2UgPSByZWYubGFuZ3VhZ2U7XG4gICAgdmFyIGNvZGUgPSByZWYuY29kZTtcbiAgICB2YXIgY2hpbGRyZW4gPSByZWYuY2hpbGRyZW47XG4gICAgdmFyIHRoZW1lRGljdCA9IHRoaXMuZ2V0VGhlbWVEaWN0KHRoaXMucHJvcHMpO1xuICAgIHZhciBncmFtbWFyID0gUHJpc20ubGFuZ3VhZ2VzW2xhbmd1YWdlXTtcbiAgICB2YXIgbWl4ZWRUb2tlbnMgPSBncmFtbWFyICE9PSB1bmRlZmluZWQgPyB0aGlzLnRva2VuaXplKFByaXNtLCBjb2RlLCBncmFtbWFyLCBsYW5ndWFnZSkgOiBbY29kZV07XG4gICAgdmFyIHRva2VucyA9IG5vcm1hbGl6ZVRva2VucyhtaXhlZFRva2Vucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuKHtcbiAgICAgIHRva2VuczogdG9rZW5zLFxuICAgICAgY2xhc3NOYW1lOiBcInByaXNtLWNvZGUgbGFuZ3VhZ2UtXCIgKyBsYW5ndWFnZSxcbiAgICAgIHN0eWxlOiB0aGVtZURpY3QgIT09IHVuZGVmaW5lZCA/IHRoZW1lRGljdC5yb290IDoge30sXG4gICAgICBnZXRMaW5lUHJvcHM6IHRoaXMuZ2V0TGluZVByb3BzLFxuICAgICAgZ2V0VG9rZW5Qcm9wczogdGhpcy5nZXRUb2tlblByb3BzXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhpZ2hsaWdodDtcbn0oQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgSGlnaGxpZ2h0O1xuZXhwb3J0IHsgZGVmYXVsdFByb3BzIH07XG4iXSwibmFtZXMiOlsicHJpc20iLCJkZWZhdWx0IiwiUHJpc20iLCJ0aGVtZSIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIm5ld2xpbmVSZSIsIm5vcm1hbGl6ZUVtcHR5TGluZXMiLCJsaW5lIiwicHVzaCIsInR5cGVzIiwiY29udGVudCIsImVtcHR5IiwiYXBwZW5kVHlwZXMiLCJhZGQiLCJ0eXBlc1NpemUiLCJjb25jYXQiLCJub3JtYWxpemVUb2tlbnMiLCJ0b2tlbnMiLCJ0eXBlQXJyU3RhY2siLCJ0b2tlbkFyclN0YWNrIiwidG9rZW5BcnJJbmRleFN0YWNrIiwidG9rZW5BcnJTaXplU3RhY2siLCJzdGFja0luZGV4IiwiY3VycmVudExpbmUiLCJhY2MiLCJ0b2tlbkFyciIsInRva2VuIiwidHlwZSIsImFsaWFzIiwic3BsaXRCeU5ld2xpbmVzIiwic3BsaXQiLCJuZXdsaW5lQ291bnQiLCJpJDEiLCJwb3AiLCJ0aGVtZVRvRGljdCIsImxhbmd1YWdlIiwicGxhaW4iLCJiYXNlIiwiY3JlYXRlIiwidGhlbWVEaWN0Iiwic3R5bGVzIiwicmVkdWNlIiwidGhlbWVFbnRyeSIsImxhbmd1YWdlcyIsInN0eWxlIiwiaW5jbHVkZXMiLCJmb3JFYWNoIiwiYWNjU3R5bGUiLCJyb290IiwiYmFja2dyb3VuZENvbG9yIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlIiwiayIsImluZGV4T2YiLCJIaWdobGlnaHQiLCJ0aGlzJDEiLCJhcmdzIiwibGVuIiwicHJvcHMiLCJ1bmRlZmluZWQiLCJwcmV2VGhlbWUiLCJwcmV2TGFuZ3VhZ2UiLCJyZWYiLCJjbGFzc05hbWUiLCJyZXN0JDEiLCJyZXN0Iiwib3V0cHV0IiwiZ2V0VGhlbWVEaWN0IiwiZGlzcGxheSIsImJhc2VTdHlsZSIsInR5cGVTdHlsZXMiLCJtYXAiLCJqb2luIiwiY2hpbGRyZW4iLCJnZXRTdHlsZUZvclRva2VuIiwiY29kZSIsImdyYW1tYXIiLCJlbnYiLCJob29rcyIsInJ1biIsInRva2VuaXplIiwiX19wcm90b19fIiwiY29uc3RydWN0b3IiLCJyZW5kZXIiLCJtaXhlZFRva2VucyIsImdldExpbmVQcm9wcyIsImdldFRva2VuUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/prism/index.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/prism/index.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */ /**\n * prism-react-renderer:\n * This file has been modified to remove:\n * - globals and window dependency\n * - worker support\n * - highlightAll and other element dependent methods\n * - _.hooks helpers\n * - UMD/node-specific hacks\n * It has also been run through prettier\n */ var Prism = function() {\n    // Private helper vars\n    var lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n    var uniqueId = 0;\n    // The grammar object for plaintext\n    var plainTextGrammar = {};\n    var _ = {\n        /**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */ util: {\n            encode: function encode(tokens) {\n                if (tokens instanceof Token) {\n                    return new Token(tokens.type, encode(tokens.content), tokens.alias);\n                } else if (Array.isArray(tokens)) {\n                    return tokens.map(encode);\n                } else {\n                    return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n                }\n            },\n            /**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */ type: function(o) {\n                return Object.prototype.toString.call(o).slice(8, -1);\n            },\n            /**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */ objId: function(obj) {\n                if (!obj[\"__id\"]) {\n                    Object.defineProperty(obj, \"__id\", {\n                        value: ++uniqueId\n                    });\n                }\n                return obj[\"__id\"];\n            },\n            /**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */ clone: function deepClone(o, visited) {\n                visited = visited || {};\n                var clone;\n                var id;\n                switch(_.util.type(o)){\n                    case \"Object\":\n                        id = _.util.objId(o);\n                        if (visited[id]) {\n                            return visited[id];\n                        }\n                        clone = /** @type {Record<string, any>} */ {};\n                        visited[id] = clone;\n                        for(var key in o){\n                            if (o.hasOwnProperty(key)) {\n                                clone[key] = deepClone(o[key], visited);\n                            }\n                        }\n                        return /** @type {any} */ clone;\n                    case \"Array\":\n                        id = _.util.objId(o);\n                        if (visited[id]) {\n                            return visited[id];\n                        }\n                        clone = [];\n                        visited[id] = clone;\n                        /** @type {Array} */ /** @type {any} */ o.forEach(function(v, i) {\n                            clone[i] = deepClone(v, visited);\n                        });\n                        return /** @type {any} */ clone;\n                    default:\n                        return o;\n                }\n            },\n            /**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */ getLanguage: function(element) {\n                while(element){\n                    var m = lang.exec(element.className);\n                    if (m) {\n                        return m[1].toLowerCase();\n                    }\n                    element = element.parentElement;\n                }\n                return \"none\";\n            },\n            /**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */ setLanguage: function(element, language) {\n                // remove all `language-xxxx` classes\n                // (this might leave behind a leading space)\n                element.className = element.className.replace(RegExp(lang, \"gi\"), \"\");\n                // add the new `language-xxxx` class\n                // (using `classList` will automatically clean up spaces for us)\n                element.classList.add(\"language-\" + language);\n            },\n            /**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */ isActive: function(element, className, defaultActivation) {\n                var no = \"no-\" + className;\n                while(element){\n                    var classList = element.classList;\n                    if (classList.contains(className)) {\n                        return true;\n                    }\n                    if (classList.contains(no)) {\n                        return false;\n                    }\n                    element = element.parentElement;\n                }\n                return !!defaultActivation;\n            }\n        },\n        /**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */ languages: {\n            /**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */ plain: plainTextGrammar,\n            plaintext: plainTextGrammar,\n            text: plainTextGrammar,\n            txt: plainTextGrammar,\n            /**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */ extend: function(id, redef) {\n                var lang = _.util.clone(_.languages[id]);\n                for(var key in redef){\n                    lang[key] = redef[key];\n                }\n                return lang;\n            },\n            /**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */ insertBefore: function(inside, before, insert, root) {\n                root = root || /** @type {any} */ _.languages;\n                var grammar = root[inside];\n                /** @type {Grammar} */ var ret = {};\n                for(var token in grammar){\n                    if (grammar.hasOwnProperty(token)) {\n                        if (token == before) {\n                            for(var newToken in insert){\n                                if (insert.hasOwnProperty(newToken)) {\n                                    ret[newToken] = insert[newToken];\n                                }\n                            }\n                        }\n                        // Do not insert token which also occur in insert. See #1525\n                        if (!insert.hasOwnProperty(token)) {\n                            ret[token] = grammar[token];\n                        }\n                    }\n                }\n                var old = root[inside];\n                root[inside] = ret;\n                // Update references in other language definitions\n                _.languages.DFS(_.languages, function(key, value) {\n                    if (value === old && key != inside) {\n                        this[key] = ret;\n                    }\n                });\n                return ret;\n            },\n            // Traverse a language definition with Depth First Search\n            DFS: function DFS(o, callback, type, visited) {\n                visited = visited || {};\n                var objId = _.util.objId;\n                for(var i in o){\n                    if (o.hasOwnProperty(i)) {\n                        callback.call(o, i, o[i], type || i);\n                        var property = o[i];\n                        var propertyType = _.util.type(property);\n                        if (propertyType === \"Object\" && !visited[objId(property)]) {\n                            visited[objId(property)] = true;\n                            DFS(property, callback, null, visited);\n                        } else if (propertyType === \"Array\" && !visited[objId(property)]) {\n                            visited[objId(property)] = true;\n                            DFS(property, callback, i, visited);\n                        }\n                    }\n                }\n            }\n        },\n        plugins: {},\n        /**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */ highlight: function(text, grammar, language) {\n            var env = {\n                code: text,\n                grammar: grammar,\n                language: language\n            };\n            _.hooks.run(\"before-tokenize\", env);\n            env.tokens = _.tokenize(env.code, env.grammar);\n            _.hooks.run(\"after-tokenize\", env);\n            return Token.stringify(_.util.encode(env.tokens), env.language);\n        },\n        /**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */ tokenize: function(text, grammar) {\n            var rest = grammar.rest;\n            if (rest) {\n                for(var token in rest){\n                    grammar[token] = rest[token];\n                }\n                delete grammar.rest;\n            }\n            var tokenList = new LinkedList();\n            addAfter(tokenList, tokenList.head, text);\n            matchGrammar(text, tokenList, grammar, tokenList.head, 0);\n            return toArray(tokenList);\n        },\n        /**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */ hooks: {\n            all: {},\n            /**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */ add: function(name, callback) {\n                var hooks = _.hooks.all;\n                hooks[name] = hooks[name] || [];\n                hooks[name].push(callback);\n            },\n            /**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */ run: function(name, env) {\n                var callbacks = _.hooks.all[name];\n                if (!callbacks || !callbacks.length) {\n                    return;\n                }\n                for(var i = 0, callback; callback = callbacks[i++];){\n                    callback(env);\n                }\n            }\n        },\n        Token: Token\n    };\n    // Typescript note:\n    // The following can be used to import the Token type in JSDoc:\n    //\n    //   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n    /**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */ function Token(type, content, alias, matchedStr) {\n        /**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */ this.type = type;\n        /**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */ this.content = content;\n        /**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */ this.alias = alias;\n        // Copy of the full string this token was created from\n        this.length = (matchedStr || \"\").length | 0;\n    }\n    /**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */ /**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */ Token.stringify = function stringify(o, language) {\n        if (typeof o == \"string\") {\n            return o;\n        }\n        if (Array.isArray(o)) {\n            var s = \"\";\n            o.forEach(function(e) {\n                s += stringify(e, language);\n            });\n            return s;\n        }\n        var env = {\n            type: o.type,\n            content: stringify(o.content, language),\n            tag: \"span\",\n            classes: [\n                \"token\",\n                o.type\n            ],\n            attributes: {},\n            language: language\n        };\n        var aliases = o.alias;\n        if (aliases) {\n            if (Array.isArray(aliases)) {\n                Array.prototype.push.apply(env.classes, aliases);\n            } else {\n                env.classes.push(aliases);\n            }\n        }\n        _.hooks.run(\"wrap\", env);\n        var attributes = \"\";\n        for(var name in env.attributes){\n            attributes += \" \" + name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n        }\n        return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + attributes + \">\" + env.content + \"</\" + env.tag + \">\";\n    };\n    /**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */ function matchPattern(pattern, pos, text, lookbehind) {\n        pattern.lastIndex = pos;\n        var match = pattern.exec(text);\n        if (match && lookbehind && match[1]) {\n            // change the match to remove the text matched by the Prism lookbehind group\n            var lookbehindLength = match[1].length;\n            match.index += lookbehindLength;\n            match[0] = match[0].slice(lookbehindLength);\n        }\n        return match;\n    }\n    /**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */ function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n        for(var token in grammar){\n            if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n                continue;\n            }\n            var patterns = grammar[token];\n            patterns = Array.isArray(patterns) ? patterns : [\n                patterns\n            ];\n            for(var j = 0; j < patterns.length; ++j){\n                if (rematch && rematch.cause == token + \",\" + j) {\n                    return;\n                }\n                var patternObj = patterns[j];\n                var inside = patternObj.inside;\n                var lookbehind = !!patternObj.lookbehind;\n                var greedy = !!patternObj.greedy;\n                var alias = patternObj.alias;\n                if (greedy && !patternObj.pattern.global) {\n                    // Without the global flag, lastIndex won't work\n                    var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n                    patternObj.pattern = RegExp(patternObj.pattern.source, flags + \"g\");\n                }\n                /** @type {RegExp} */ var pattern = patternObj.pattern || patternObj;\n                for(var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next){\n                    if (rematch && pos >= rematch.reach) {\n                        break;\n                    }\n                    var str = currentNode.value;\n                    if (tokenList.length > text.length) {\n                        // Something went terribly wrong, ABORT, ABORT!\n                        return;\n                    }\n                    if (str instanceof Token) {\n                        continue;\n                    }\n                    var removeCount = 1; // this is the to parameter of removeBetween\n                    var match;\n                    if (greedy) {\n                        match = matchPattern(pattern, pos, text, lookbehind);\n                        if (!match || match.index >= text.length) {\n                            break;\n                        }\n                        var from = match.index;\n                        var to = match.index + match[0].length;\n                        var p = pos;\n                        // find the node that contains the match\n                        p += currentNode.value.length;\n                        while(from >= p){\n                            currentNode = currentNode.next;\n                            p += currentNode.value.length;\n                        }\n                        // adjust pos (and p)\n                        p -= currentNode.value.length;\n                        pos = p;\n                        // the current node is a Token, then the match starts inside another Token, which is invalid\n                        if (currentNode.value instanceof Token) {\n                            continue;\n                        }\n                        // find the last node which is affected by this match\n                        for(var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === \"string\"); k = k.next){\n                            removeCount++;\n                            p += k.value.length;\n                        }\n                        removeCount--;\n                        // replace with the new match\n                        str = text.slice(pos, p);\n                        match.index -= pos;\n                    } else {\n                        match = matchPattern(pattern, 0, str, lookbehind);\n                        if (!match) {\n                            continue;\n                        }\n                    }\n                    // eslint-disable-next-line no-redeclare\n                    var from = match.index;\n                    var matchStr = match[0];\n                    var before = str.slice(0, from);\n                    var after = str.slice(from + matchStr.length);\n                    var reach = pos + str.length;\n                    if (rematch && reach > rematch.reach) {\n                        rematch.reach = reach;\n                    }\n                    var removeFrom = currentNode.prev;\n                    if (before) {\n                        removeFrom = addAfter(tokenList, removeFrom, before);\n                        pos += before.length;\n                    }\n                    removeRange(tokenList, removeFrom, removeCount);\n                    var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n                    currentNode = addAfter(tokenList, removeFrom, wrapped);\n                    if (after) {\n                        addAfter(tokenList, currentNode, after);\n                    }\n                    if (removeCount > 1) {\n                        // at least one Token object was removed, so we have to do some rematching\n                        // this can only happen if the current pattern is greedy\n                        /** @type {RematchOptions} */ var nestedRematch = {\n                            cause: token + \",\" + j,\n                            reach: reach\n                        };\n                        matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n                        // the reach might have been extended because of the rematching\n                        if (rematch && nestedRematch.reach > rematch.reach) {\n                            rematch.reach = nestedRematch.reach;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */ /**\n\t * @template T\n\t * @private\n\t */ function LinkedList() {\n        /** @type {LinkedListNode<T>} */ var head = {\n            value: null,\n            prev: null,\n            next: null\n        };\n        /** @type {LinkedListNode<T>} */ var tail = {\n            value: null,\n            prev: head,\n            next: null\n        };\n        head.next = tail;\n        /** @type {LinkedListNode<T>} */ this.head = head;\n        /** @type {LinkedListNode<T>} */ this.tail = tail;\n        this.length = 0;\n    }\n    /**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */ function addAfter(list, node, value) {\n        // assumes that node != list.tail && values.length >= 0\n        var next = node.next;\n        var newNode = {\n            value: value,\n            prev: node,\n            next: next\n        };\n        node.next = newNode;\n        next.prev = newNode;\n        list.length++;\n        return newNode;\n    }\n    /**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */ function removeRange(list, node, count) {\n        var next = node.next;\n        for(var i = 0; i < count && next !== list.tail; i++){\n            next = next.next;\n        }\n        node.next = next;\n        next.prev = node;\n        list.length -= i;\n    }\n    /**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */ function toArray(list) {\n        var array = [];\n        var node = list.head.next;\n        while(node !== list.tail){\n            array.push(node.value);\n            node = node.next;\n        }\n        return array;\n    }\n    return _;\n}();\nvar prism = Prism;\nPrism.default = Prism;\n/* This content is auto-generated to include some prismjs language components: */ /* \"prismjs/components/prism-markup\" */ prism.languages.markup = {\n    \"comment\": {\n        pattern: /<!--(?:(?!<!--)[\\s\\S])*?-->/,\n        greedy: true\n    },\n    \"prolog\": {\n        pattern: /<\\?[\\s\\S]+?\\?>/,\n        greedy: true\n    },\n    \"doctype\": {\n        // https://www.w3.org/TR/xml/#NT-doctypedecl\n        pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\\]\\s*)?>/i,\n        greedy: true,\n        inside: {\n            \"internal-subset\": {\n                pattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n                lookbehind: true,\n                greedy: true,\n                inside: null // see below\n            },\n            \"string\": {\n                pattern: /\"[^\"]*\"|'[^']*'/,\n                greedy: true\n            },\n            \"punctuation\": /^<!|>$|[[\\]]/,\n            \"doctype-tag\": /^DOCTYPE/i,\n            \"name\": /[^\\s<>'\"]+/\n        }\n    },\n    \"cdata\": {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        greedy: true\n    },\n    \"tag\": {\n        pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n        greedy: true,\n        inside: {\n            \"tag\": {\n                pattern: /^<\\/?[^\\s>\\/]+/,\n                inside: {\n                    \"punctuation\": /^<\\/?/,\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            },\n            \"special-attr\": [],\n            \"attr-value\": {\n                pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n                inside: {\n                    \"punctuation\": [\n                        {\n                            pattern: /^=/,\n                            alias: \"attr-equals\"\n                        },\n                        /\"|'/\n                    ]\n                }\n            },\n            \"punctuation\": /\\/?>/,\n            \"attr-name\": {\n                pattern: /[^\\s>\\/]+/,\n                inside: {\n                    \"namespace\": /^[^\\s>\\/:]+:/\n                }\n            }\n        }\n    },\n    \"entity\": [\n        {\n            pattern: /&[\\da-z]{1,8};/i,\n            alias: \"named-entity\"\n        },\n        /&#x?[\\da-f]{1,8};/i\n    ]\n};\nprism.languages.markup[\"tag\"].inside[\"attr-value\"].inside[\"entity\"] = prism.languages.markup[\"entity\"];\nprism.languages.markup[\"doctype\"].inside[\"internal-subset\"].inside = prism.languages.markup; // Plugin to make entity title show the real entity, idea by Roman Komarov\nprism.hooks.add(\"wrap\", function(env) {\n    if (env.type === \"entity\") {\n        env.attributes[\"title\"] = env.content.replace(/&amp;/, \"&\");\n    }\n});\nObject.defineProperty(prism.languages.markup.tag, \"addInlined\", {\n    /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */ value: function addInlined(tagName, lang) {\n        var includedCdataInside = {};\n        includedCdataInside[\"language-\" + lang] = {\n            pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n            lookbehind: true,\n            inside: prism.languages[lang]\n        };\n        includedCdataInside[\"cdata\"] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n        var inside = {\n            \"included-cdata\": {\n                pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n                inside: includedCdataInside\n            }\n        };\n        inside[\"language-\" + lang] = {\n            pattern: /[\\s\\S]+/,\n            inside: prism.languages[lang]\n        };\n        var def = {};\n        def[tagName] = {\n            pattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function() {\n                return tagName;\n            }), \"i\"),\n            lookbehind: true,\n            greedy: true,\n            inside: inside\n        };\n        prism.languages.insertBefore(\"markup\", \"cdata\", def);\n    }\n});\nObject.defineProperty(prism.languages.markup.tag, \"addAttribute\", {\n    /**\n   * Adds an pattern to highlight languages embedded in HTML attributes.\n   *\n   * An example of an inlined language is CSS with `style` attributes.\n   *\n   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addAttribute('style', 'css');\n   */ value: function(attrName, lang) {\n        prism.languages.markup.tag.inside[\"special-attr\"].push({\n            pattern: RegExp(/(^|[\"'\\s])/.source + \"(?:\" + attrName + \")\" + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source, \"i\"),\n            lookbehind: true,\n            inside: {\n                \"attr-name\": /^[^\\s=]+/,\n                \"attr-value\": {\n                    pattern: /=[\\s\\S]+/,\n                    inside: {\n                        \"value\": {\n                            pattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n                            lookbehind: true,\n                            alias: [\n                                lang,\n                                \"language-\" + lang\n                            ],\n                            inside: prism.languages[lang]\n                        },\n                        \"punctuation\": [\n                            {\n                                pattern: /^=/,\n                                alias: \"attr-equals\"\n                            },\n                            /\"|'/\n                        ]\n                    }\n                }\n            }\n        });\n    }\n});\nprism.languages.html = prism.languages.markup;\nprism.languages.mathml = prism.languages.markup;\nprism.languages.svg = prism.languages.markup;\nprism.languages.xml = prism.languages.extend(\"markup\", {});\nprism.languages.ssml = prism.languages.xml;\nprism.languages.atom = prism.languages.xml;\nprism.languages.rss = prism.languages.xml;\n/* \"prismjs/components/prism-bash\" */ (function(Prism) {\n    // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n    // + LC_ALL, RANDOM, REPLY, SECONDS.\n    // + make sure PS1..4 are here as they are not always set,\n    // - some useless things.\n    var envVars = \"\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b\";\n    var commandAfterHeredoc = {\n        pattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n        lookbehind: true,\n        alias: \"punctuation\",\n        // this looks reasonably well in all themes\n        inside: null // see below\n    };\n    var insideString = {\n        \"bash\": commandAfterHeredoc,\n        \"environment\": {\n            pattern: RegExp(\"\\\\$\" + envVars),\n            alias: \"constant\"\n        },\n        \"variable\": [\n            {\n                pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n                greedy: true,\n                inside: {\n                    // If there is a $ sign at the beginning highlight $(( and )) as variable\n                    \"variable\": [\n                        {\n                            pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n                            lookbehind: true\n                        },\n                        /^\\$\\(\\(/\n                    ],\n                    \"number\": /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n                    // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n                    \"operator\": /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n                    // If there is no $ sign at the beginning highlight (( and )) as punctuation\n                    \"punctuation\": /\\(\\(?|\\)\\)?|,|;/\n                }\n            },\n            {\n                pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n                greedy: true,\n                inside: {\n                    \"variable\": /^\\$\\(|^`|\\)$|`$/\n                }\n            },\n            {\n                pattern: /\\$\\{[^}]+\\}/,\n                greedy: true,\n                inside: {\n                    \"operator\": /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n                    \"punctuation\": /[\\[\\]]/,\n                    \"environment\": {\n                        pattern: RegExp(\"(\\\\{)\" + envVars),\n                        lookbehind: true,\n                        alias: \"constant\"\n                    }\n                }\n            },\n            /\\$(?:\\w+|[#?*!@$])/\n        ],\n        // Escape sequences from echo and printf's manuals, and escaped quotes.\n        \"entity\": /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n    };\n    Prism.languages.bash = {\n        \"shebang\": {\n            pattern: /^#!\\s*\\/.*/,\n            alias: \"important\"\n        },\n        \"comment\": {\n            pattern: /(^|[^\"{\\\\$])#.*/,\n            lookbehind: true\n        },\n        \"function-name\": [\n            // b) foo() {\n            // c) function foo() {\n            // but not “foo {”\n            {\n                // a) and c)\n                pattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n                lookbehind: true,\n                alias: \"function\"\n            },\n            {\n                // b)\n                pattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n                alias: \"function\"\n            }\n        ],\n        // Highlight variable names as variables in for and select beginnings.\n        \"for-or-select\": {\n            pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n            alias: \"variable\",\n            lookbehind: true\n        },\n        // Highlight variable names as variables in the left-hand part\n        // of assignments (“=” and “+=”).\n        \"assign-left\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n            inside: {\n                \"environment\": {\n                    pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n                    lookbehind: true,\n                    alias: \"constant\"\n                }\n            },\n            alias: \"variable\",\n            lookbehind: true\n        },\n        \"string\": [\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n                lookbehind: true,\n                greedy: true,\n                inside: insideString\n            },\n            // → No expansion (so no “inside”).\n            {\n                pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n                lookbehind: true,\n                greedy: true,\n                inside: {\n                    \"bash\": commandAfterHeredoc\n                }\n            },\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n                pattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n                lookbehind: true,\n                greedy: true,\n                inside: insideString\n            },\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n                pattern: /(^|[^$\\\\])'[^']*'/,\n                lookbehind: true,\n                greedy: true\n            },\n            {\n                // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n                pattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n                greedy: true,\n                inside: {\n                    \"entity\": insideString.entity\n                }\n            }\n        ],\n        \"environment\": {\n            pattern: RegExp(\"\\\\$?\" + envVars),\n            alias: \"constant\"\n        },\n        \"variable\": insideString.variable,\n        \"function\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        \"keyword\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n        \"builtin\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n            lookbehind: true,\n            // Alias added to make those easier to distinguish from strings.\n            alias: \"class-name\"\n        },\n        \"boolean\": {\n            pattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n            lookbehind: true\n        },\n        \"file-descriptor\": {\n            pattern: /\\B&\\d\\b/,\n            alias: \"important\"\n        },\n        \"operator\": {\n            // Lots of redirections here, but not just that.\n            pattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n            inside: {\n                \"file-descriptor\": {\n                    pattern: /^\\d/,\n                    alias: \"important\"\n                }\n            }\n        },\n        \"punctuation\": /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n        \"number\": {\n            pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n            lookbehind: true\n        }\n    };\n    commandAfterHeredoc.inside = Prism.languages.bash;\n    /* Patterns in command substitution. */ var toBeCopied = [\n        \"comment\",\n        \"function-name\",\n        \"for-or-select\",\n        \"assign-left\",\n        \"string\",\n        \"environment\",\n        \"function\",\n        \"keyword\",\n        \"builtin\",\n        \"boolean\",\n        \"file-descriptor\",\n        \"operator\",\n        \"punctuation\",\n        \"number\"\n    ];\n    var inside = insideString.variable[1].inside;\n    for(var i = 0; i < toBeCopied.length; i++){\n        inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n    }\n    Prism.languages.shell = Prism.languages.bash;\n})(prism);\n/* \"prismjs/components/prism-clike\" */ prism.languages.clike = {\n    \"comment\": [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: true,\n            greedy: true\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: true,\n            greedy: true\n        }\n    ],\n    \"string\": {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n            \"punctuation\": /[.\\\\]/\n        }\n    },\n    \"keyword\": /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"function\": /\\b\\w+(?=\\()/,\n    \"number\": /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    \"operator\": /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n    \"punctuation\": /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */ prism.languages.c = prism.languages.extend(\"clike\", {\n    \"comment\": {\n        pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: true\n    },\n    \"string\": {\n        // https://en.cppreference.com/w/c/language/string_literal\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    \"class-name\": {\n        pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n        lookbehind: true\n    },\n    \"keyword\": /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    \"function\": /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    \"number\": /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    \"operator\": />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n});\nprism.languages.insertBefore(\"c\", \"string\", {\n    \"char\": {\n        // https://en.cppreference.com/w/c/language/character_constant\n        pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n        greedy: true\n    }\n});\nprism.languages.insertBefore(\"c\", \"string\", {\n    \"macro\": {\n        // allow for multiline macro definitions\n        // spaces after the # character compile fine with gcc\n        pattern: /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\",\n        inside: {\n            \"string\": [\n                {\n                    // highlight the path of the include statement as a string\n                    pattern: /^(#\\s*include\\s*)<[^>]+>/,\n                    lookbehind: true\n                },\n                prism.languages.c[\"string\"]\n            ],\n            \"char\": prism.languages.c[\"char\"],\n            \"comment\": prism.languages.c[\"comment\"],\n            \"macro-name\": [\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n                    lookbehind: true\n                },\n                {\n                    pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n                    lookbehind: true,\n                    alias: \"function\"\n                }\n            ],\n            // highlight macro directives as keywords\n            \"directive\": {\n                pattern: /^(#\\s*)[a-z]+/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            \"directive-hash\": /^#/,\n            \"punctuation\": /##|\\\\(?=[\\r\\n])/,\n            \"expression\": {\n                pattern: /\\S[\\s\\S]*/,\n                inside: prism.languages.c\n            }\n        }\n    }\n});\nprism.languages.insertBefore(\"c\", \"function\", {\n    // highlight predefined macros as constants\n    \"constant\": /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n});\ndelete prism.languages.c[\"boolean\"];\n/* \"prismjs/components/prism-cpp\" */ (function(Prism) {\n    var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function() {\n        return keyword.source;\n    });\n    Prism.languages.cpp = Prism.languages.extend(\"c\", {\n        \"class-name\": [\n            {\n                pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function() {\n                    return keyword.source;\n                })),\n                lookbehind: true\n            },\n            //   void foo::bar() const {}\n            // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n            // it starts with an uppercase letter. This approximation should give decent results.\n            /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n            //   Foo::~Foo() {}\n            /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n            // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n            /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n        ],\n        \"keyword\": keyword,\n        \"number\": {\n            pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n            greedy: true\n        },\n        \"operator\": />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n        \"boolean\": /\\b(?:false|true)\\b/\n    });\n    Prism.languages.insertBefore(\"cpp\", \"string\", {\n        \"module\": {\n            // https://en.cppreference.com/w/cpp/language/modules\n            pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + \"(?:\" + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + \"|\" + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function() {\n                return modName;\n            }) + \")\"),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"string\": /^[<\"][\\s\\S]+/,\n                \"operator\": /:/,\n                \"punctuation\": /\\./\n            }\n        },\n        \"raw-string\": {\n            pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n            alias: \"string\",\n            greedy: true\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"keyword\", {\n        \"generic-function\": {\n            pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n            inside: {\n                \"function\": /^\\w+/,\n                \"generic\": {\n                    pattern: /<[\\s\\S]+/,\n                    alias: \"class-name\",\n                    inside: Prism.languages.cpp\n                }\n            }\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"operator\", {\n        \"double-colon\": {\n            pattern: /::/,\n            alias: \"punctuation\"\n        }\n    });\n    Prism.languages.insertBefore(\"cpp\", \"class-name\", {\n        // the base clause is an optional list of parent classes\n        // https://en.cppreference.com/w/cpp/language/class\n        \"base-clause\": {\n            pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n            lookbehind: true,\n            greedy: true,\n            inside: Prism.languages.extend(\"cpp\", {})\n        }\n    });\n    Prism.languages.insertBefore(\"inside\", \"double-colon\", {\n        // All untokenized words that are not namespaces should be class names\n        \"class-name\": /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, Prism.languages.cpp[\"base-clause\"]);\n})(prism);\n/* \"prismjs/components/prism-css\" */ (function(Prism) {\n    var string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n    Prism.languages.css = {\n        \"comment\": /\\/\\*[\\s\\S]*?\\*\\//,\n        \"atrule\": {\n            pattern: /@[\\w-](?:[^;{\\s]|\\s+(?![\\s{]))*(?:;|(?=\\s*\\{))/,\n            inside: {\n                \"rule\": /^@[\\w-]+/,\n                \"selector-function-argument\": {\n                    pattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n                    lookbehind: true,\n                    alias: \"selector\"\n                },\n                \"keyword\": {\n                    pattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n                    lookbehind: true\n                } // See rest below\n            }\n        },\n        \"url\": {\n            // https://drafts.csswg.org/css-values-3/#urls\n            pattern: RegExp(\"\\\\burl\\\\((?:\" + string.source + \"|\" + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + \")\\\\)\", \"i\"),\n            greedy: true,\n            inside: {\n                \"function\": /^url/i,\n                \"punctuation\": /^\\(|\\)$/,\n                \"string\": {\n                    pattern: RegExp(\"^\" + string.source + \"$\"),\n                    alias: \"url\"\n                }\n            }\n        },\n        \"selector\": {\n            pattern: RegExp(\"(^|[{}\\\\s])[^{}\\\\s](?:[^{};\\\"'\\\\s]|\\\\s+(?![\\\\s{])|\" + string.source + \")*(?=\\\\s*\\\\{)\"),\n            lookbehind: true\n        },\n        \"string\": {\n            pattern: string,\n            greedy: true\n        },\n        \"property\": {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n            lookbehind: true\n        },\n        \"important\": /!important\\b/i,\n        \"function\": {\n            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n            lookbehind: true\n        },\n        \"punctuation\": /[(){};:,]/\n    };\n    Prism.languages.css[\"atrule\"].inside.rest = Prism.languages.css;\n    var markup = Prism.languages.markup;\n    if (markup) {\n        markup.tag.addInlined(\"style\", \"css\");\n        markup.tag.addAttribute(\"style\", \"css\");\n    }\n})(prism);\n/* \"prismjs/components/prism-css-extras\" */ (function(Prism) {\n    var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var selectorInside;\n    Prism.languages.css.selector = {\n        pattern: Prism.languages.css.selector.pattern,\n        lookbehind: true,\n        inside: selectorInside = {\n            \"pseudo-element\": /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n            \"pseudo-class\": /:[-\\w]+/,\n            \"class\": /\\.[-\\w]+/,\n            \"id\": /#[-\\w]+/,\n            \"attribute\": {\n                pattern: RegExp(\"\\\\[(?:[^[\\\\]\\\"']|\" + string.source + \")*\\\\]\"),\n                greedy: true,\n                inside: {\n                    \"punctuation\": /^\\[|\\]$/,\n                    \"case-sensitivity\": {\n                        pattern: /(\\s)[si]$/i,\n                        lookbehind: true,\n                        alias: \"keyword\"\n                    },\n                    \"namespace\": {\n                        pattern: /^(\\s*)(?:(?!\\s)[-*\\w\\xA0-\\uFFFF])*\\|(?!=)/,\n                        lookbehind: true,\n                        inside: {\n                            \"punctuation\": /\\|$/\n                        }\n                    },\n                    \"attr-name\": {\n                        pattern: /^(\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+/,\n                        lookbehind: true\n                    },\n                    \"attr-value\": [\n                        string,\n                        {\n                            pattern: /(=\\s*)(?:(?!\\s)[-\\w\\xA0-\\uFFFF])+(?=\\s*$)/,\n                            lookbehind: true\n                        }\n                    ],\n                    \"operator\": /[|~*^$]?=/\n                }\n            },\n            \"n-th\": [\n                {\n                    pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n                    lookbehind: true,\n                    inside: {\n                        \"number\": /[\\dn]+/,\n                        \"operator\": /[+-]/\n                    }\n                },\n                {\n                    pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n                    lookbehind: true\n                }\n            ],\n            \"combinator\": />|\\+|~|\\|\\|/,\n            // the `tag` token has been existed and removed.\n            // because we can't find a perfect tokenize to match it.\n            // if you want to add it, please read https://github.com/PrismJS/prism/pull/2373 first.\n            \"punctuation\": /[(),]/\n        }\n    };\n    Prism.languages.css[\"atrule\"].inside[\"selector-function-argument\"].inside = selectorInside;\n    Prism.languages.insertBefore(\"css\", \"property\", {\n        \"variable\": {\n            pattern: /(^|[^-\\w\\xA0-\\uFFFF])--(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*/i,\n            lookbehind: true\n        }\n    });\n    var unit = {\n        pattern: /(\\b\\d+)(?:%|[a-z]+(?![\\w-]))/,\n        lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n        pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n        lookbehind: true\n    };\n    Prism.languages.insertBefore(\"css\", \"function\", {\n        \"operator\": {\n            pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n            lookbehind: true\n        },\n        // CAREFUL!\n        // Previewers and Inline color use hexcode and color.\n        \"hexcode\": {\n            pattern: /\\B#[\\da-f]{3,8}\\b/i,\n            alias: \"color\"\n        },\n        \"color\": [\n            {\n                pattern: /(^|[^\\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\\w-])/i,\n                lookbehind: true\n            },\n            {\n                pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n                inside: {\n                    \"unit\": unit,\n                    \"number\": number,\n                    \"function\": /[\\w-]+(?=\\()/,\n                    \"punctuation\": /[(),]/\n                }\n            }\n        ],\n        // it's important that there is no boundary assertion after the hex digits\n        \"entity\": /\\\\[\\da-f]{1,8}/i,\n        \"unit\": unit,\n        \"number\": number\n    });\n})(prism);\n/* \"prismjs/components/prism-javascript\" */ prism.languages.javascript = prism.languages.extend(\"clike\", {\n    \"class-name\": [\n        prism.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n            lookbehind: true\n        }\n    ],\n    \"keyword\": [\n        {\n            pattern: /((?:^|\\})\\s*)catch\\b/,\n            lookbehind: true\n        },\n        {\n            pattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: true\n        }\n    ],\n    // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n    \"function\": /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    \"number\": {\n        pattern: RegExp(/(^|[^\\w$])/.source + \"(?:\" + (/NaN|Infinity/.source + \"|\" + // binary integer\n        /0[bB][01]+(?:_[01]+)*n?/.source + \"|\" + // octal integer\n        /0[oO][0-7]+(?:_[0-7]+)*n?/.source + \"|\" + // hexadecimal integer\n        /0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source + \"|\" + // decimal bigint\n        /\\d+(?:_\\d+)*n/.source + \"|\" + // decimal number (integer or float) but no bigint\n        /(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source) + \")\" + /(?![\\w$])/.source),\n        lookbehind: true\n    },\n    \"operator\": /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\nprism.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\nprism.languages.insertBefore(\"javascript\", \"keyword\", {\n    \"regex\": {\n        // eslint-disable-next-line regexp/no-dupe-characters-character-class\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n            \"regex-source\": {\n                pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n                lookbehind: true,\n                alias: \"language-regex\",\n                inside: prism.languages.regex\n            },\n            \"regex-delimiter\": /^\\/|\\/$/,\n            \"regex-flags\": /^[a-z]+$/\n        }\n    },\n    // This must be declared before keyword because we use \"function\" inside the look-forward\n    \"function-variable\": {\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n        alias: \"function\"\n    },\n    \"parameter\": [\n        {\n            pattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n            lookbehind: true,\n            inside: prism.languages.javascript\n        },\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n            lookbehind: true,\n            inside: prism.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n            lookbehind: true,\n            inside: prism.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n            lookbehind: true,\n            inside: prism.languages.javascript\n        }\n    ],\n    \"constant\": /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nprism.languages.insertBefore(\"javascript\", \"string\", {\n    \"hashbang\": {\n        pattern: /^#!.*/,\n        greedy: true,\n        alias: \"comment\"\n    },\n    \"template-string\": {\n        pattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n        greedy: true,\n        inside: {\n            \"template-punctuation\": {\n                pattern: /^`|`$/,\n                alias: \"string\"\n            },\n            \"interpolation\": {\n                pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"interpolation-punctuation\": {\n                        pattern: /^\\$\\{|\\}$/,\n                        alias: \"punctuation\"\n                    },\n                    rest: prism.languages.javascript\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        }\n    },\n    \"string-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n        lookbehind: true,\n        greedy: true,\n        alias: \"property\"\n    }\n});\nprism.languages.insertBefore(\"javascript\", \"operator\", {\n    \"literal-property\": {\n        pattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n        lookbehind: true,\n        alias: \"property\"\n    }\n});\nif (prism.languages.markup) {\n    prism.languages.markup.tag.addInlined(\"script\", \"javascript\"); // add attribute support for all DOM events.\n    // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n    prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, \"javascript\");\n}\nprism.languages.js = prism.languages.javascript;\n/* \"prismjs/components/prism-coffeescript\" */ (function(Prism) {\n    // Ignore comments starting with { to privilege string interpolation highlighting\n    var comment = /#(?!\\{).+/;\n    var interpolation = {\n        pattern: /#\\{[^}]+\\}/,\n        alias: \"variable\"\n    };\n    Prism.languages.coffeescript = Prism.languages.extend(\"javascript\", {\n        \"comment\": comment,\n        \"string\": [\n            {\n                pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n                greedy: true\n            },\n            {\n                // Strings are multiline\n                pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n                greedy: true,\n                inside: {\n                    \"interpolation\": interpolation\n                }\n            }\n        ],\n        \"keyword\": /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n        \"class-member\": {\n            pattern: /@(?!\\d)\\w+/,\n            alias: \"variable\"\n        }\n    });\n    Prism.languages.insertBefore(\"coffeescript\", \"comment\", {\n        \"multiline-comment\": {\n            pattern: /###[\\s\\S]+?###/,\n            alias: \"comment\"\n        },\n        // Block regexp can contain comments and interpolation\n        \"block-regex\": {\n            pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n            alias: \"regex\",\n            inside: {\n                \"comment\": comment,\n                \"interpolation\": interpolation\n            }\n        }\n    });\n    Prism.languages.insertBefore(\"coffeescript\", \"string\", {\n        \"inline-javascript\": {\n            pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n            inside: {\n                \"delimiter\": {\n                    pattern: /^`|`$/,\n                    alias: \"punctuation\"\n                },\n                \"script\": {\n                    pattern: /[\\s\\S]+/,\n                    alias: \"language-javascript\",\n                    inside: Prism.languages.javascript\n                }\n            }\n        },\n        // Block strings\n        \"multiline-string\": [\n            {\n                pattern: /'''[\\s\\S]*?'''/,\n                greedy: true,\n                alias: \"string\"\n            },\n            {\n                pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n                greedy: true,\n                alias: \"string\",\n                inside: {\n                    interpolation: interpolation\n                }\n            }\n        ]\n    });\n    Prism.languages.insertBefore(\"coffeescript\", \"keyword\", {\n        // Object property\n        \"property\": /(?!\\d)\\w+(?=\\s*:(?!:))/\n    });\n    delete Prism.languages.coffeescript[\"template-string\"];\n    Prism.languages.coffee = Prism.languages.coffeescript;\n})(prism);\n/* \"prismjs/components/prism-yaml\" */ (function(Prism) {\n    // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n    // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n    var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n    var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n    var properties = \"(?:\" + tag.source + \"(?:[ \t]+\" + anchorOrAlias.source + \")?|\" + anchorOrAlias.source + \"(?:[ \t]+\" + tag.source + \")?)\"; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n    // This is a simplified version that doesn't support \"#\" and multiline keys\n    // All these long scarry character classes are simplified versions of YAML's characters\n    var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function() {\n        return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n    });\n    var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n    /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */ function createValuePattern(value, flags) {\n        flags = (flags || \"\").replace(/m/g, \"\") + \"m\"; // add m flag\n        var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|\\]|\\}|(?:[\\r\\n]\\s*)?#))/.source.replace(/<<prop>>/g, function() {\n            return properties;\n        }).replace(/<<value>>/g, function() {\n            return value;\n        });\n        return RegExp(pattern, flags);\n    }\n    Prism.languages.yaml = {\n        \"scalar\": {\n            pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)\\S[^\\r\\n]*(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function() {\n                return properties;\n            })),\n            lookbehind: true,\n            alias: \"string\"\n        },\n        \"comment\": /#.*/,\n        \"key\": {\n            pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function() {\n                return properties;\n            }).replace(/<<key>>/g, function() {\n                return \"(?:\" + plainKey + \"|\" + string + \")\";\n            })),\n            lookbehind: true,\n            greedy: true,\n            alias: \"atrule\"\n        },\n        \"directive\": {\n            pattern: /(^[ \\t]*)%.+/m,\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"datetime\": {\n            pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?))?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n            lookbehind: true,\n            alias: \"number\"\n        },\n        \"boolean\": {\n            pattern: createValuePattern(/false|true/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"null\": {\n            pattern: createValuePattern(/null|~/.source, \"i\"),\n            lookbehind: true,\n            alias: \"important\"\n        },\n        \"string\": {\n            pattern: createValuePattern(string),\n            lookbehind: true,\n            greedy: true\n        },\n        \"number\": {\n            pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, \"i\"),\n            lookbehind: true\n        },\n        \"tag\": tag,\n        \"important\": anchorOrAlias,\n        \"punctuation\": /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n    };\n    Prism.languages.yml = Prism.languages.yaml;\n})(prism);\n/* \"prismjs/components/prism-markdown\" */ (function(Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?![\\r\\n]))/.source;\n    /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @returns {RegExp}\n   */ function createInline(pattern) {\n        pattern = pattern.replace(/<inner>/g, function() {\n            return inner;\n        });\n        return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + \"(?:\" + pattern + \")\");\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|(?![\\s\\S]))/.source.replace(/__/g, function() {\n        return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend(\"markup\", {});\n    Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n        \"front-matter-block\": {\n            pattern: /(^(?:\\s*[\\r\\n])?)---(?!.)[\\s\\S]*?[\\r\\n]---(?!.)/,\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"punctuation\": /^---|---$/,\n                \"front-matter\": {\n                    pattern: /\\S+(?:\\s+\\S+)*/,\n                    alias: [\n                        \"yaml\",\n                        \"language-yaml\"\n                    ],\n                    inside: Prism.languages.yaml\n                }\n            }\n        },\n        \"blockquote\": {\n            // > ...\n            pattern: /^>(?:[\\t ]*>)*/m,\n            alias: \"punctuation\"\n        },\n        \"table\": {\n            pattern: RegExp(\"^\" + tableRow + tableLine + \"(?:\" + tableRow + \")*\", \"m\"),\n            inside: {\n                \"table-data-rows\": {\n                    pattern: RegExp(\"^(\" + tableRow + tableLine + \")(?:\" + tableRow + \")*$\"),\n                    lookbehind: true,\n                    inside: {\n                        \"table-data\": {\n                            pattern: RegExp(tableCell),\n                            inside: Prism.languages.markdown\n                        },\n                        \"punctuation\": /\\|/\n                    }\n                },\n                \"table-line\": {\n                    pattern: RegExp(\"^(\" + tableRow + \")\" + tableLine + \"$\"),\n                    lookbehind: true,\n                    inside: {\n                        \"punctuation\": /\\||:?-{3,}:?/\n                    }\n                },\n                \"table-header-row\": {\n                    pattern: RegExp(\"^\" + tableRow + \"$\"),\n                    inside: {\n                        \"table-header\": {\n                            pattern: RegExp(tableCell),\n                            alias: \"important\",\n                            inside: Prism.languages.markdown\n                        },\n                        \"punctuation\": /\\|/\n                    }\n                }\n            }\n        },\n        \"code\": [\n            {\n                // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n                pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n                lookbehind: true,\n                alias: \"keyword\"\n            },\n            {\n                // ```optional language\n                // code block\n                // ```\n                pattern: /^```[\\s\\S]*?^```$/m,\n                greedy: true,\n                inside: {\n                    \"code-block\": {\n                        pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n                        lookbehind: true\n                    },\n                    \"code-language\": {\n                        pattern: /^(```).+/,\n                        lookbehind: true\n                    },\n                    \"punctuation\": /```/\n                }\n            }\n        ],\n        \"title\": [\n            {\n                // title 1\n                // =======\n                // title 2\n                // -------\n                pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n                alias: \"important\",\n                inside: {\n                    punctuation: /==+$|--+$/\n                }\n            },\n            {\n                // # title 1\n                // ###### title 6\n                pattern: /(^\\s*)#.+/m,\n                lookbehind: true,\n                alias: \"important\",\n                inside: {\n                    punctuation: /^#+|#+$/\n                }\n            }\n        ],\n        \"hr\": {\n            // ***\n            // ---\n            // * * *\n            // -----------\n            pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"list\": {\n            // * item\n            // + item\n            // - item\n            // 1. item\n            pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n            lookbehind: true,\n            alias: \"punctuation\"\n        },\n        \"url-reference\": {\n            // [id]: http://example.com \"Optional title\"\n            // [id]: http://example.com 'Optional title'\n            // [id]: http://example.com (Optional title)\n            // [id]: <http://example.com> \"Optional title\"\n            pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n            inside: {\n                \"variable\": {\n                    pattern: /^(!?\\[)[^\\]]+/,\n                    lookbehind: true\n                },\n                \"string\": /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n                \"punctuation\": /^[\\[\\]!:]|[<>]/\n            },\n            alias: \"url\"\n        },\n        \"bold\": {\n            // **strong**\n            // __strong__\n            // allow one nested instance of italic text using the same delimiter\n            pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^..)[\\s\\S]+(?=..$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /\\*\\*|__/\n            }\n        },\n        \"italic\": {\n            // *em*\n            // _em_\n            // allow one nested instance of bold text using the same delimiter\n            pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^.)[\\s\\S]+(?=.$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /[*_]/\n            }\n        },\n        \"strike\": {\n            // ~~strike through~~\n            // ~strike~\n            // eslint-disable-next-line regexp/strict\n            pattern: createInline(/(~~?)(?:(?!~)<inner>)+\\2/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"content\": {\n                    pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"punctuation\": /~~?/\n            }\n        },\n        \"code-snippet\": {\n            // `code`\n            // ``code``\n            pattern: /(^|[^\\\\`])(?:``[^`\\r\\n]+(?:`[^`\\r\\n]+)*``(?!`)|`[^`\\r\\n]+`(?!`))/,\n            lookbehind: true,\n            greedy: true,\n            alias: [\n                \"code\",\n                \"keyword\"\n            ]\n        },\n        \"url\": {\n            // [example](http://example.com \"Optional title\")\n            // [example][id]\n            // [example] [id]\n            pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)|[ \\t]?\\[(?:(?!\\])<inner>)+\\])/.source),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"operator\": /^!/,\n                \"content\": {\n                    pattern: /(^\\[)[^\\]]+(?=\\])/,\n                    lookbehind: true,\n                    inside: {} // see below\n                },\n                \"variable\": {\n                    pattern: /(^\\][ \\t]?\\[)[^\\]]+(?=\\]$)/,\n                    lookbehind: true\n                },\n                \"url\": {\n                    pattern: /(^\\]\\()[^\\s)]+/,\n                    lookbehind: true\n                },\n                \"string\": {\n                    pattern: /(^[ \\t]+)\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/,\n                    lookbehind: true\n                }\n            }\n        }\n    });\n    [\n        \"url\",\n        \"bold\",\n        \"italic\",\n        \"strike\"\n    ].forEach(function(token) {\n        [\n            \"url\",\n            \"bold\",\n            \"italic\",\n            \"strike\",\n            \"code-snippet\"\n        ].forEach(function(inside) {\n            if (token !== inside) {\n                Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n            }\n        });\n    });\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        if (env.language !== \"markdown\" && env.language !== \"md\") {\n            return;\n        }\n        function walkTokens(tokens) {\n            if (!tokens || typeof tokens === \"string\") {\n                return;\n            }\n            for(var i = 0, l = tokens.length; i < l; i++){\n                var token = tokens[i];\n                if (token.type !== \"code\") {\n                    walkTokens(token.content);\n                    continue;\n                }\n                /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */ var codeLang = token.content[1];\n                var codeBlock = token.content[3];\n                if (codeLang && codeBlock && codeLang.type === \"code-language\" && codeBlock.type === \"code-block\" && typeof codeLang.content === \"string\") {\n                    // this might be a language that Prism does not support\n                    // do some replacements to support C++, C#, and F#\n                    var lang = codeLang.content.replace(/\\b#/g, \"sharp\").replace(/\\b\\+\\+/g, \"pp\"); // only use the first word\n                    lang = (/[a-z][\\w-]*/i.exec(lang) || [\n                        \"\"\n                    ])[0].toLowerCase();\n                    var alias = \"language-\" + lang; // add alias\n                    if (!codeBlock.alias) {\n                        codeBlock.alias = [\n                            alias\n                        ];\n                    } else if (typeof codeBlock.alias === \"string\") {\n                        codeBlock.alias = [\n                            codeBlock.alias,\n                            alias\n                        ];\n                    } else {\n                        codeBlock.alias.push(alias);\n                    }\n                }\n            }\n        }\n        walkTokens(env.tokens);\n    });\n    Prism.hooks.add(\"wrap\", function(env) {\n        if (env.type !== \"code-block\") {\n            return;\n        }\n        var codeLang = \"\";\n        for(var i = 0, l = env.classes.length; i < l; i++){\n            var cls = env.classes[i];\n            var match = /language-(.+)/.exec(cls);\n            if (match) {\n                codeLang = match[1];\n                break;\n            }\n        }\n        var grammar = Prism.languages[codeLang];\n        if (!grammar) {\n            if (codeLang && codeLang !== \"none\" && Prism.plugins.autoloader) {\n                var id = \"md-\" + new Date().valueOf() + \"-\" + Math.floor(Math.random() * 1e16);\n                env.attributes[\"id\"] = id;\n                Prism.plugins.autoloader.loadLanguages(codeLang, function() {\n                    var ele = document.getElementById(id);\n                    if (ele) {\n                        ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n                    }\n                });\n            }\n        } else {\n            env.content = Prism.highlight(textContent(env.content), grammar, codeLang);\n        }\n    });\n    var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, \"gi\");\n    /**\n   * A list of known entity names.\n   *\n   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.\n   *\n   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}\n   */ var KNOWN_ENTITY_NAMES = {\n        \"amp\": \"&\",\n        \"lt\": \"<\",\n        \"gt\": \">\",\n        \"quot\": '\"'\n    }; // IE 11 doesn't support `String.fromCodePoint`\n    var fromCodePoint = String.fromCodePoint || String.fromCharCode;\n    /**\n   * Returns the text content of a given HTML source code string.\n   *\n   * @param {string} html\n   * @returns {string}\n   */ function textContent(html) {\n        // remove all tags\n        var text = html.replace(tagPattern, \"\"); // decode known entities\n        text = text.replace(/&(\\w{1,8}|#x?[\\da-f]{1,8});/gi, function(m, code) {\n            code = code.toLowerCase();\n            if (code[0] === \"#\") {\n                var value;\n                if (code[1] === \"x\") {\n                    value = parseInt(code.slice(2), 16);\n                } else {\n                    value = Number(code.slice(1));\n                }\n                return fromCodePoint(value);\n            } else {\n                var known = KNOWN_ENTITY_NAMES[code];\n                if (known) {\n                    return known;\n                } // unable to decode\n                return m;\n            }\n        });\n        return text;\n    }\n    Prism.languages.md = Prism.languages.markdown;\n})(prism);\n/* \"prismjs/components/prism-graphql\" */ prism.languages.graphql = {\n    \"comment\": /#.*/,\n    \"description\": {\n        pattern: /(?:\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")(?=\\s*[a-z_])/i,\n        greedy: true,\n        alias: \"string\",\n        inside: {\n            \"language-markdown\": {\n                pattern: /(^\"(?:\"\")?)(?!\\1)[\\s\\S]+(?=\\1$)/,\n                lookbehind: true,\n                inside: prism.languages.markdown\n            }\n        }\n    },\n    \"string\": {\n        pattern: /\"\"\"(?:[^\"]|(?!\"\"\")\")*\"\"\"|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n    },\n    \"number\": /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"variable\": /\\$[a-z_]\\w*/i,\n    \"directive\": {\n        pattern: /@[a-z_]\\w*/i,\n        alias: \"function\"\n    },\n    \"attr-name\": {\n        pattern: /\\b[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n        greedy: true\n    },\n    \"atom-input\": {\n        pattern: /\\b[A-Z]\\w*Input\\b/,\n        alias: \"class-name\"\n    },\n    \"scalar\": /\\b(?:Boolean|Float|ID|Int|String)\\b/,\n    \"constant\": /\\b[A-Z][A-Z_\\d]*\\b/,\n    \"class-name\": {\n        pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+|&\\s*|:\\s*|\\[)[A-Z_]\\w*/,\n        lookbehind: true\n    },\n    \"fragment\": {\n        pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"definition-mutation\": {\n        pattern: /(\\bmutation\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"definition-query\": {\n        pattern: /(\\bquery\\s+)[a-zA-Z_]\\w*/,\n        lookbehind: true,\n        alias: \"function\"\n    },\n    \"keyword\": /\\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\\b/,\n    \"operator\": /[!=|&]|\\.{3}/,\n    \"property-query\": /\\w+(?=\\s*\\()/,\n    \"object\": /\\w+(?=\\s*\\{)/,\n    \"punctuation\": /[!(){}\\[\\]:=,]/,\n    \"property\": /\\w+/\n};\nprism.hooks.add(\"after-tokenize\", function afterTokenizeGraphql(env) {\n    if (env.language !== \"graphql\") {\n        return;\n    }\n    /**\n   * get the graphql token stream that we want to customize\n   *\n   * @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n   * @type {Token[]}\n   */ var validTokens = env.tokens.filter(function(token) {\n        return typeof token !== \"string\" && token.type !== \"comment\" && token.type !== \"scalar\";\n    });\n    var currentIndex = 0;\n    /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {number} offset\n   * @returns {Token | undefined}\n   */ function getToken(offset) {\n        return validTokens[currentIndex + offset];\n    }\n    /**\n   * Returns whether the token relative to the current index has the given type.\n   *\n   * @param {readonly string[]} types\n   * @param {number} [offset=0]\n   * @returns {boolean}\n   */ function isTokenType(types, offset) {\n        offset = offset || 0;\n        for(var i = 0; i < types.length; i++){\n            var token = getToken(i + offset);\n            if (!token || token.type !== types[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n   * Returns the index of the closing bracket to an opening bracket.\n   *\n   * It is assumed that `token[currentIndex - 1]` is an opening bracket.\n   *\n   * If no closing bracket could be found, `-1` will be returned.\n   *\n   * @param {RegExp} open\n   * @param {RegExp} close\n   * @returns {number}\n   */ function findClosingBracket(open, close) {\n        var stackHeight = 1;\n        for(var i = currentIndex; i < validTokens.length; i++){\n            var token = validTokens[i];\n            var content = token.content;\n            if (token.type === \"punctuation\" && typeof content === \"string\") {\n                if (open.test(content)) {\n                    stackHeight++;\n                } else if (close.test(content)) {\n                    stackHeight--;\n                    if (stackHeight === 0) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n   * Adds an alias to the given token.\n   *\n   * @param {Token} token\n   * @param {string} alias\n   * @returns {void}\n   */ function addAlias(token, alias) {\n        var aliases = token.alias;\n        if (!aliases) {\n            token.alias = aliases = [];\n        } else if (!Array.isArray(aliases)) {\n            token.alias = aliases = [\n                aliases\n            ];\n        }\n        aliases.push(alias);\n    }\n    for(; currentIndex < validTokens.length;){\n        var startToken = validTokens[currentIndex++]; // add special aliases for mutation tokens\n        if (startToken.type === \"keyword\" && startToken.content === \"mutation\") {\n            // any array of the names of all input variables (if any)\n            var inputVariables = [];\n            if (isTokenType([\n                \"definition-mutation\",\n                \"punctuation\"\n            ]) && getToken(1).content === \"(\") {\n                // definition\n                currentIndex += 2; // skip 'definition-mutation' and 'punctuation'\n                var definitionEnd = findClosingBracket(/^\\($/, /^\\)$/);\n                if (definitionEnd === -1) {\n                    continue;\n                } // find all input variables\n                for(; currentIndex < definitionEnd; currentIndex++){\n                    var t = getToken(0);\n                    if (t.type === \"variable\") {\n                        addAlias(t, \"variable-input\");\n                        inputVariables.push(t.content);\n                    }\n                }\n                currentIndex = definitionEnd + 1;\n            }\n            if (isTokenType([\n                \"punctuation\",\n                \"property-query\"\n            ]) && getToken(0).content === \"{\") {\n                currentIndex++; // skip opening bracket\n                addAlias(getToken(0), \"property-mutation\");\n                if (inputVariables.length > 0) {\n                    var mutationEnd = findClosingBracket(/^\\{$/, /^\\}$/);\n                    if (mutationEnd === -1) {\n                        continue;\n                    } // give references to input variables a special alias\n                    for(var i = currentIndex; i < mutationEnd; i++){\n                        var varToken = validTokens[i];\n                        if (varToken.type === \"variable\" && inputVariables.indexOf(varToken.content) >= 0) {\n                            addAlias(varToken, \"variable-input\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n/* \"prismjs/components/prism-sql\" */ prism.languages.sql = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n        lookbehind: true\n    },\n    \"variable\": [\n        {\n            pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n            greedy: true\n        },\n        /@[\\w.$]+/\n    ],\n    \"string\": {\n        pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n        greedy: true,\n        lookbehind: true\n    },\n    \"identifier\": {\n        pattern: /(^|[^@\\\\])`(?:\\\\[\\s\\S]|[^`\\\\]|``)*`/,\n        greedy: true,\n        lookbehind: true,\n        inside: {\n            \"punctuation\": /^`|`$/\n        }\n    },\n    \"function\": /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n    // Should we highlight user defined functions too?\n    \"keyword\": /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n    \"boolean\": /\\b(?:FALSE|NULL|TRUE)\\b/i,\n    \"number\": /\\b0x[\\da-f]+\\b|\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+\\b/i,\n    \"operator\": /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n    \"punctuation\": /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-js-templates\" */ (function(Prism) {\n    var templateString = Prism.languages.javascript[\"template-string\"]; // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source;\n    var interpolationObject = templateString.inside[\"interpolation\"];\n    var interpolationPunctuationObject = interpolationObject.inside[\"interpolation-punctuation\"];\n    var interpolationPattern = interpolationObject.pattern.source;\n    /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */ function createTemplate(language, tag) {\n        if (!Prism.languages[language]) {\n            return undefined;\n        }\n        return {\n            pattern: RegExp(\"((?:\" + tag + \")\\\\s*)\" + templateLiteralPattern),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n                \"template-punctuation\": {\n                    pattern: /^`|`$/,\n                    alias: \"string\"\n                },\n                \"embedded-code\": {\n                    pattern: /[\\s\\S]+/,\n                    alias: language\n                }\n            }\n        };\n    }\n    Prism.languages.javascript[\"template-string\"] = [\n        //   css`a { color: #25F; }`\n        // styled-components:\n        //   styled.h1`color: red;`\n        createTemplate(\"css\", /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),\n        // div.innerHTML = `<p></p>`\n        createTemplate(\"html\", /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source),\n        createTemplate(\"svg\", /\\bsvg/.source),\n        createTemplate(\"markdown\", /\\b(?:markdown|md)/.source),\n        createTemplate(\"graphql\", /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source),\n        createTemplate(\"sql\", /\\bsql/.source),\n        templateString\n    ].filter(Boolean);\n    /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */ function getPlaceholder(counter, language) {\n        return \"___\" + language.toUpperCase() + \"_\" + counter + \"___\";\n    }\n    /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */ function tokenizeWithHooks(code, grammar, language) {\n        var env = {\n            code: code,\n            grammar: grammar,\n            language: language\n        };\n        Prism.hooks.run(\"before-tokenize\", env);\n        env.tokens = Prism.tokenize(env.code, env.grammar);\n        Prism.hooks.run(\"after-tokenize\", env);\n        return env.tokens;\n    }\n    /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */ function tokenizeInterpolationExpression(expression) {\n        var tempGrammar = {};\n        tempGrammar[\"interpolation-punctuation\"] = interpolationPunctuationObject;\n        /** @type {Array} */ var tokens = Prism.tokenize(expression, tempGrammar);\n        if (tokens.length === 3) {\n            /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */ var args = [\n                1,\n                1\n            ];\n            args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, \"javascript\"));\n            tokens.splice.apply(tokens, args);\n        }\n        return new Prism.Token(\"interpolation\", tokens, interpolationObject.alias, expression);\n    }\n    /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */ function tokenizeEmbedded(code, grammar, language) {\n        // 1. First filter out all interpolations\n        // because they might be escaped, we need a lookbehind, so we use Prism\n        /** @type {(Token|string)[]} */ var _tokens = Prism.tokenize(code, {\n            \"interpolation\": {\n                pattern: RegExp(interpolationPattern),\n                lookbehind: true\n            }\n        }); // replace all interpolations with a placeholder which is not in the code already\n        var placeholderCounter = 0;\n        /** @type {Object<string, string>} */ var placeholderMap = {};\n        var embeddedCode = _tokens.map(function(token) {\n            if (typeof token === \"string\") {\n                return token;\n            } else {\n                var interpolationExpression = token.content;\n                var placeholder;\n                while(code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1){\n                /* noop */ }\n                placeholderMap[placeholder] = interpolationExpression;\n                return placeholder;\n            }\n        }).join(\"\"); // 2. Tokenize the embedded code\n        var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n        var placeholders = Object.keys(placeholderMap);\n        placeholderCounter = 0;\n        /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */ function walkTokens(tokens) {\n            for(var i = 0; i < tokens.length; i++){\n                if (placeholderCounter >= placeholders.length) {\n                    return;\n                }\n                var token = tokens[i];\n                if (typeof token === \"string\" || typeof token.content === \"string\") {\n                    var placeholder = placeholders[placeholderCounter];\n                    var s = typeof token === \"string\" ? token : /** @type {string} */ token.content;\n                    var index = s.indexOf(placeholder);\n                    if (index !== -1) {\n                        ++placeholderCounter;\n                        var before = s.substring(0, index);\n                        var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n                        var after = s.substring(index + placeholder.length);\n                        var replacement = [];\n                        if (before) {\n                            replacement.push(before);\n                        }\n                        replacement.push(middle);\n                        if (after) {\n                            var afterTokens = [\n                                after\n                            ];\n                            walkTokens(afterTokens);\n                            replacement.push.apply(replacement, afterTokens);\n                        }\n                        if (typeof token === \"string\") {\n                            tokens.splice.apply(tokens, [\n                                i,\n                                1\n                            ].concat(replacement));\n                            i += replacement.length - 1;\n                        } else {\n                            token.content = replacement;\n                        }\n                    }\n                } else {\n                    var content = token.content;\n                    if (Array.isArray(content)) {\n                        walkTokens(content);\n                    } else {\n                        walkTokens([\n                            content\n                        ]);\n                    }\n                }\n            }\n        }\n        walkTokens(embeddedTokens);\n        return new Prism.Token(language, embeddedTokens, \"language-\" + language, code);\n    }\n    /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */ var supportedLanguages = {\n        \"javascript\": true,\n        \"js\": true,\n        \"typescript\": true,\n        \"ts\": true,\n        \"jsx\": true,\n        \"tsx\": true\n    };\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        if (!(env.language in supportedLanguages)) {\n            return;\n        }\n        /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */ function findTemplateStrings(tokens) {\n            for(var i = 0, l = tokens.length; i < l; i++){\n                var token = tokens[i];\n                if (typeof token === \"string\") {\n                    continue;\n                }\n                var content = token.content;\n                if (!Array.isArray(content)) {\n                    if (typeof content !== \"string\") {\n                        findTemplateStrings([\n                            content\n                        ]);\n                    }\n                    continue;\n                }\n                if (token.type === \"template-string\") {\n                    /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */ var embedded = content[1];\n                    if (content.length === 3 && typeof embedded !== \"string\" && embedded.type === \"embedded-code\") {\n                        // get string content\n                        var code = stringContent(embedded);\n                        var alias = embedded.alias;\n                        var language = Array.isArray(alias) ? alias[0] : alias;\n                        var grammar = Prism.languages[language];\n                        if (!grammar) {\n                            continue;\n                        }\n                        content[1] = tokenizeEmbedded(code, grammar, language);\n                    }\n                } else {\n                    findTemplateStrings(content);\n                }\n            }\n        }\n        findTemplateStrings(env.tokens);\n    });\n    /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */ function stringContent(value) {\n        if (typeof value === \"string\") {\n            return value;\n        } else if (Array.isArray(value)) {\n            return value.map(stringContent).join(\"\");\n        } else {\n            return stringContent(value.content);\n        }\n    }\n})(prism);\n/* \"prismjs/components/prism-typescript\" */ (function(Prism) {\n    Prism.languages.typescript = Prism.languages.extend(\"javascript\", {\n        \"class-name\": {\n            pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n            lookbehind: true,\n            greedy: true,\n            inside: null // see below\n        },\n        \"builtin\": /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }); // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript[\"parameter\"];\n    delete Prism.languages.typescript[\"literal-property\"]; // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend(\"typescript\", {});\n    delete typeInside[\"class-name\"];\n    Prism.languages.typescript[\"class-name\"].inside = typeInside;\n    Prism.languages.insertBefore(\"typescript\", \"function\", {\n        \"decorator\": {\n            pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n            inside: {\n                \"at\": {\n                    pattern: /^@/,\n                    alias: \"operator\"\n                },\n                \"function\": /^[\\s\\S]+/\n            }\n        },\n        \"generic-function\": {\n            // e.g. foo<T extends \"bar\" | \"baz\">( ...\n            pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n            greedy: true,\n            inside: {\n                \"function\": /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n                \"generic\": {\n                    pattern: /<[\\s\\S]+/,\n                    // everything after the first <\n                    alias: \"class-name\",\n                    inside: typeInside\n                }\n            }\n        }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n})(prism);\n/* \"prismjs/components/prism-js-extras\" */ (function(Prism) {\n    Prism.languages.insertBefore(\"javascript\", \"function-variable\", {\n        \"method-variable\": {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + Prism.languages.javascript[\"function-variable\"].pattern.source),\n            lookbehind: true,\n            alias: [\n                \"function-variable\",\n                \"method\",\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"function\", {\n        \"method\": {\n            pattern: RegExp(\"(\\\\.\\\\s*)\" + Prism.languages.javascript[\"function\"].source),\n            lookbehind: true,\n            alias: [\n                \"function\",\n                \"property-access\"\n            ]\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"constant\", {\n        \"known-class-name\": [\n            {\n                // standard built-ins\n                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n                pattern: /\\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\\b/,\n                alias: \"class-name\"\n            },\n            {\n                // errors\n                pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n                alias: \"class-name\"\n            }\n        ]\n    });\n    /**\n   * Replaces the `<ID>` placeholder in the given pattern with a pattern for general JS identifiers.\n   *\n   * @param {string} source\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */ function withId(source, flags) {\n        return RegExp(source.replace(/<ID>/g, function() {\n            return /(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/.source;\n        }), flags);\n    }\n    Prism.languages.insertBefore(\"javascript\", \"keyword\", {\n        \"imports\": {\n            // https://tc39.es/ecma262/#sec-imports\n            pattern: withId(/(\\bimport\\b\\s*)(?:<ID>(?:\\s*,\\s*(?:\\*\\s*as\\s+<ID>|\\{[^{}]*\\}))?|\\*\\s*as\\s+<ID>|\\{[^{}]*\\})(?=\\s*\\bfrom\\b)/.source),\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        },\n        \"exports\": {\n            // https://tc39.es/ecma262/#sec-exports\n            pattern: withId(/(\\bexport\\b\\s*)(?:\\*(?:\\s*as\\s+<ID>)?(?=\\s*\\bfrom\\b)|\\{[^{}]*\\})/.source),\n            lookbehind: true,\n            inside: Prism.languages.javascript\n        }\n    });\n    Prism.languages.javascript[\"keyword\"].unshift({\n        pattern: /\\b(?:as|default|export|from|import)\\b/,\n        alias: \"module\"\n    }, {\n        pattern: /\\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\\b/,\n        alias: \"control-flow\"\n    }, {\n        pattern: /\\bnull\\b/,\n        alias: [\n            \"null\",\n            \"nil\"\n        ]\n    }, {\n        pattern: /\\bundefined\\b/,\n        alias: \"nil\"\n    });\n    Prism.languages.insertBefore(\"javascript\", \"operator\", {\n        \"spread\": {\n            pattern: /\\.{3}/,\n            alias: \"operator\"\n        },\n        \"arrow\": {\n            pattern: /=>/,\n            alias: \"operator\"\n        }\n    });\n    Prism.languages.insertBefore(\"javascript\", \"punctuation\", {\n        \"property-access\": {\n            pattern: withId(/(\\.\\s*)#?<ID>/.source),\n            lookbehind: true\n        },\n        \"maybe-class-name\": {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n            lookbehind: true\n        },\n        \"dom\": {\n            // this contains only a few commonly used DOM variables\n            pattern: /\\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\\b/,\n            alias: \"variable\"\n        },\n        \"console\": {\n            pattern: /\\bconsole(?=\\s*\\.)/,\n            alias: \"class-name\"\n        }\n    }); // add 'maybe-class-name' to tokens which might be a class name\n    var maybeClassNameTokens = [\n        \"function\",\n        \"function-variable\",\n        \"method\",\n        \"method-variable\",\n        \"property-access\"\n    ];\n    for(var i = 0; i < maybeClassNameTokens.length; i++){\n        var token = maybeClassNameTokens[i];\n        var value = Prism.languages.javascript[token]; // convert regex to object\n        if (Prism.util.type(value) === \"RegExp\") {\n            value = Prism.languages.javascript[token] = {\n                pattern: value\n            };\n        } // keep in mind that we don't support arrays\n        var inside = value.inside || {};\n        value.inside = inside;\n        inside[\"maybe-class-name\"] = /^[A-Z][\\s\\S]*/;\n    }\n})(prism);\n/* \"prismjs/components/prism-jsx\" */ (function(Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript);\n    var space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n    var braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n    var spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n    /**\n   * @param {string} source\n   * @param {string} [flags]\n   */ function re(source, flags) {\n        source = source.replace(/<S>/g, function() {\n            return space;\n        }).replace(/<BRACES>/g, function() {\n            return braces;\n        }).replace(/<SPREAD>/g, function() {\n            return spread;\n        });\n        return RegExp(source, flags);\n    }\n    spread = re(spread).source;\n    Prism.languages.jsx = Prism.languages.extend(\"markup\", javascript);\n    Prism.languages.jsx.tag.pattern = re(/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source);\n    Prism.languages.jsx.tag.inside[\"tag\"].pattern = /^<\\/?[^\\s>\\/]*/;\n    Prism.languages.jsx.tag.inside[\"attr-value\"].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n    Prism.languages.jsx.tag.inside[\"tag\"].inside[\"class-name\"] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n    Prism.languages.jsx.tag.inside[\"comment\"] = javascript[\"comment\"];\n    Prism.languages.insertBefore(\"inside\", \"attr-name\", {\n        \"spread\": {\n            pattern: re(/<SPREAD>/.source),\n            inside: Prism.languages.jsx\n        }\n    }, Prism.languages.jsx.tag);\n    Prism.languages.insertBefore(\"inside\", \"special-attr\", {\n        \"script\": {\n            // Allow for two levels of nesting\n            pattern: re(/=<BRACES>/.source),\n            alias: \"language-javascript\",\n            inside: {\n                \"script-punctuation\": {\n                    pattern: /^=(?=\\{)/,\n                    alias: \"punctuation\"\n                },\n                rest: Prism.languages.jsx\n            }\n        }\n    }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n        if (!token) {\n            return \"\";\n        }\n        if (typeof token === \"string\") {\n            return token;\n        }\n        if (typeof token.content === \"string\") {\n            return token.content;\n        }\n        return token.content.map(stringifyToken).join(\"\");\n    };\n    var walkTokens = function(tokens) {\n        var openedTags = [];\n        for(var i = 0; i < tokens.length; i++){\n            var token = tokens[i];\n            var notTagNorBrace = false;\n            if (typeof token !== \"string\") {\n                if (token.type === \"tag\" && token.content[0] && token.content[0].type === \"tag\") {\n                    // We found a tag, now find its kind\n                    if (token.content[0].content[0].content === \"</\") {\n                        // Closing tag\n                        if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                            // Pop matching opening tag\n                            openedTags.pop();\n                        }\n                    } else {\n                        if (token.content[token.content.length - 1].content === \"/>\") ;\n                        else {\n                            // Opening tag\n                            openedTags.push({\n                                tagName: stringifyToken(token.content[0].content[1]),\n                                openedBraces: 0\n                            });\n                        }\n                    }\n                } else if (openedTags.length > 0 && token.type === \"punctuation\" && token.content === \"{\") {\n                    // Here we might have entered a JSX context inside a tag\n                    openedTags[openedTags.length - 1].openedBraces++;\n                } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === \"punctuation\" && token.content === \"}\") {\n                    // Here we might have left a JSX context inside a tag\n                    openedTags[openedTags.length - 1].openedBraces--;\n                } else {\n                    notTagNorBrace = true;\n                }\n            }\n            if (notTagNorBrace || typeof token === \"string\") {\n                if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n                    // Here we are inside a tag, and not inside a JSX context.\n                    // That's plain text: drop any tokens matched.\n                    var plainText = stringifyToken(token); // And merge text with adjacent text\n                    if (i < tokens.length - 1 && (typeof tokens[i + 1] === \"string\" || tokens[i + 1].type === \"plain-text\")) {\n                        plainText += stringifyToken(tokens[i + 1]);\n                        tokens.splice(i + 1, 1);\n                    }\n                    if (i > 0 && (typeof tokens[i - 1] === \"string\" || tokens[i - 1].type === \"plain-text\")) {\n                        plainText = stringifyToken(tokens[i - 1]) + plainText;\n                        tokens.splice(i - 1, 1);\n                        i--;\n                    }\n                    tokens[i] = new Prism.Token(\"plain-text\", plainText, null, plainText);\n                }\n            }\n            if (token.content && typeof token.content !== \"string\") {\n                walkTokens(token.content);\n            }\n        }\n    };\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        if (env.language !== \"jsx\" && env.language !== \"tsx\") {\n            return;\n        }\n        walkTokens(env.tokens);\n    });\n})(prism);\n/* \"prismjs/components/prism-diff\" */ (function(Prism) {\n    Prism.languages.diff = {\n        \"coord\": [\n            /^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n            /^@@.*@@$/m,\n            /^\\d.*$/m\n        ] // deleted, inserted, unchanged, diff\n    };\n    /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */ var PREFIXES = {\n        \"deleted-sign\": \"-\",\n        \"deleted-arrow\": \"<\",\n        \"inserted-sign\": \"+\",\n        \"inserted-arrow\": \">\",\n        \"unchanged\": \" \",\n        \"diff\": \"!\"\n    }; // add a token for each prefix\n    Object.keys(PREFIXES).forEach(function(name) {\n        var prefix = PREFIXES[name];\n        var alias = [];\n        if (!/^\\w+$/.test(name)) {\n            // \"deleted-sign\" -> \"deleted\"\n            alias.push(/\\w+/.exec(name)[0]);\n        }\n        if (name === \"diff\") {\n            alias.push(\"bold\");\n        }\n        Prism.languages.diff[name] = {\n            pattern: RegExp(\"^(?:[\" + prefix + \"].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+\", \"m\"),\n            alias: alias,\n            inside: {\n                \"line\": {\n                    pattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n                    lookbehind: true\n                },\n                \"prefix\": {\n                    pattern: /[\\s\\S]/,\n                    alias: /\\w+/.exec(name)[0]\n                }\n            }\n        };\n    }); // make prefixes available to Diff plugin\n    Object.defineProperty(Prism.languages.diff, \"PREFIXES\", {\n        value: PREFIXES\n    });\n})(prism);\n/* \"prismjs/components/prism-git\" */ prism.languages.git = {\n    /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */ \"comment\": /^#.*/m,\n    /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */ \"deleted\": /^[-–].*/m,\n    \"inserted\": /^\\+.*/m,\n    /*\n   * a string (double and simple quote)\n   */ \"string\": /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */ \"command\": {\n        pattern: /^.*\\$ git .*$/m,\n        inside: {\n            /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */ \"parameter\": /\\s--?\\w+/\n        }\n    },\n    /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */ \"coord\": /^@@.*@@$/m,\n    /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */ \"commit-sha1\": /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */ prism.languages.go = prism.languages.extend(\"clike\", {\n    \"string\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|`[^`]*`/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"keyword\": /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n    \"boolean\": /\\b(?:_|false|iota|nil|true)\\b/,\n    \"number\": [\n        /\\b0(?:b[01_]+|o[0-7_]+)i?\\b/i,\n        /\\b0x(?:[a-f\\d_]+(?:\\.[a-f\\d_]*)?|\\.[a-f\\d_]+)(?:p[+-]?\\d+(?:_\\d+)*)?i?(?!\\w)/i,\n        /(?:\\b\\d[\\d_]*(?:\\.[\\d_]*)?|\\B\\.\\d[\\d_]*)(?:e[+-]?[\\d_]+)?i?(?!\\w)/i\n    ],\n    \"operator\": /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n    \"builtin\": /\\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\\b/\n});\nprism.languages.insertBefore(\"go\", \"string\", {\n    \"char\": {\n        pattern: /'(?:\\\\.|[^'\\\\\\r\\n]){0,10}'/,\n        greedy: true\n    }\n});\ndelete prism.languages.go[\"class-name\"];\n/* \"prismjs/components/prism-markup-templating\" */ (function(Prism) {\n    /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */ function getPlaceholder(language, index) {\n        return \"___\" + language.toUpperCase() + index + \"___\";\n    }\n    Object.defineProperties(Prism.languages[\"markup-templating\"] = {}, {\n        buildPlaceholders: {\n            /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */ value: function(env, language, placeholderPattern, replaceFilter) {\n                if (env.language !== language) {\n                    return;\n                }\n                var tokenStack = env.tokenStack = [];\n                env.code = env.code.replace(placeholderPattern, function(match) {\n                    if (typeof replaceFilter === \"function\" && !replaceFilter(match)) {\n                        return match;\n                    }\n                    var i = tokenStack.length;\n                    var placeholder; // Check for existing strings\n                    while(env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1){\n                        ++i;\n                    } // Create a sparse array\n                    tokenStack[i] = match;\n                    return placeholder;\n                }); // Switch the grammar to markup\n                env.grammar = Prism.languages.markup;\n            }\n        },\n        tokenizePlaceholders: {\n            /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */ value: function(env, language) {\n                if (env.language !== language || !env.tokenStack) {\n                    return;\n                } // Switch the grammar back\n                env.grammar = Prism.languages[language];\n                var j = 0;\n                var keys = Object.keys(env.tokenStack);\n                function walkTokens(tokens) {\n                    for(var i = 0; i < tokens.length; i++){\n                        // all placeholders are replaced already\n                        if (j >= keys.length) {\n                            break;\n                        }\n                        var token = tokens[i];\n                        if (typeof token === \"string\" || token.content && typeof token.content === \"string\") {\n                            var k = keys[j];\n                            var t = env.tokenStack[k];\n                            var s = typeof token === \"string\" ? token : token.content;\n                            var placeholder = getPlaceholder(language, k);\n                            var index = s.indexOf(placeholder);\n                            if (index > -1) {\n                                ++j;\n                                var before = s.substring(0, index);\n                                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), \"language-\" + language, t);\n                                var after = s.substring(index + placeholder.length);\n                                var replacement = [];\n                                if (before) {\n                                    replacement.push.apply(replacement, walkTokens([\n                                        before\n                                    ]));\n                                }\n                                replacement.push(middle);\n                                if (after) {\n                                    replacement.push.apply(replacement, walkTokens([\n                                        after\n                                    ]));\n                                }\n                                if (typeof token === \"string\") {\n                                    tokens.splice.apply(tokens, [\n                                        i,\n                                        1\n                                    ].concat(replacement));\n                                } else {\n                                    token.content = replacement;\n                                }\n                            }\n                        } else if (token.content) {\n                            walkTokens(token.content);\n                        }\n                    }\n                    return tokens;\n                }\n                walkTokens(env.tokens);\n            }\n        }\n    });\n})(prism);\n/* \"prismjs/components/prism-handlebars\" */ (function(Prism) {\n    Prism.languages.handlebars = {\n        \"comment\": /\\{\\{![\\s\\S]*?\\}\\}/,\n        \"delimiter\": {\n            pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n            alias: \"punctuation\"\n        },\n        \"string\": /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        \"number\": /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n        \"boolean\": /\\b(?:false|true)\\b/,\n        \"block\": {\n            pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n            lookbehind: true,\n            alias: \"keyword\"\n        },\n        \"brackets\": {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n                punctuation: /\\[|\\]/,\n                variable: /[\\s\\S]+/\n            }\n        },\n        \"punctuation\": /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n        \"variable\": /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    };\n    Prism.hooks.add(\"before-tokenize\", function(env) {\n        var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n        Prism.languages[\"markup-templating\"].buildPlaceholders(env, \"handlebars\", handlebarsPattern);\n    });\n    Prism.hooks.add(\"after-tokenize\", function(env) {\n        Prism.languages[\"markup-templating\"].tokenizePlaceholders(env, \"handlebars\");\n    });\n    Prism.languages.hbs = Prism.languages.handlebars;\n})(prism);\n/* \"prismjs/components/prism-json\" */ // https://www.json.org/json-en.html\nprism.languages.json = {\n    \"property\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string\": {\n        pattern: /(^|[^\\\\])\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"comment\": {\n        pattern: /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n        greedy: true\n    },\n    \"number\": /-?\\b\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n    \"punctuation\": /[{}[\\],]/,\n    \"operator\": /:/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    }\n};\nprism.languages.webmanifest = prism.languages.json;\n/* \"prismjs/components/prism-less\" */ /* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */ prism.languages.less = prism.languages.extend(\"css\", {\n    \"comment\": [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n            pattern: /(^|[^\\\\])\\/\\/.*/,\n            lookbehind: true\n        }\n    ],\n    \"atrule\": {\n        pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            \"punctuation\": /[:()]/\n        }\n    },\n    // selectors and mixins are considered the same\n    \"selector\": {\n        pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n        inside: {\n            // mixin parameters\n            \"variable\": /@+[\\w-]+/\n        }\n    },\n    \"property\": /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    \"operator\": /[+\\-*\\/]/\n});\nprism.languages.insertBefore(\"less\", \"property\", {\n    \"variable\": [\n        {\n            pattern: /@[\\w-]+\\s*:/,\n            inside: {\n                \"punctuation\": /:/\n            }\n        },\n        /@@?[\\w-]+/\n    ],\n    \"mixin-usage\": {\n        pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n        lookbehind: true,\n        alias: \"function\"\n    }\n});\n/* \"prismjs/components/prism-makefile\" */ prism.languages.makefile = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n        lookbehind: true\n    },\n    \"string\": {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n    },\n    \"builtin-target\": {\n        pattern: /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n        alias: \"builtin\"\n    },\n    \"target\": {\n        pattern: /^(?:[^:=\\s]|[ \\t]+(?![\\s:]))+(?=\\s*:(?!=))/m,\n        alias: \"symbol\",\n        inside: {\n            \"variable\": /\\$+(?:(?!\\$)[^(){}:#=\\s]+|(?=[({]))/\n        }\n    },\n    \"variable\": /\\$+(?:(?!\\$)[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n    // Directives\n    \"keyword\": /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/,\n    \"function\": {\n        pattern: /(\\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \\t])/,\n        lookbehind: true\n    },\n    \"operator\": /(?:::|[?:+!])?=|[|@]/,\n    \"punctuation\": /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */ prism.languages.objectivec = prism.languages.extend(\"c\", {\n    \"string\": {\n        pattern: /@?\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n        greedy: true\n    },\n    \"keyword\": /\\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n    \"operator\": /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete prism.languages.objectivec[\"class-name\"];\nprism.languages.objc = prism.languages.objectivec;\n/* \"prismjs/components/prism-ocaml\" */ // https://ocaml.org/manual/lex.html\nprism.languages.ocaml = {\n    \"comment\": {\n        pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n        greedy: true\n    },\n    \"char\": {\n        pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n        greedy: true\n    },\n    \"string\": [\n        {\n            pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n            greedy: true\n        },\n        {\n            pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n            greedy: true\n        }\n    ],\n    \"number\": [\n        /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i,\n        /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i,\n        /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n    ],\n    \"directive\": {\n        pattern: /\\B#\\w+/,\n        alias: \"property\"\n    },\n    \"label\": {\n        pattern: /\\B~\\w+/,\n        alias: \"property\"\n    },\n    \"type-variable\": {\n        pattern: /\\B'\\w+/,\n        alias: \"function\"\n    },\n    \"variant\": {\n        pattern: /`\\w+/,\n        alias: \"symbol\"\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    \"keyword\": /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"operator-like-punctuation\": {\n        pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n        alias: \"punctuation\"\n    },\n    // Custom operators are allowed\n    \"operator\": /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    \"punctuation\": /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n};\n/* \"prismjs/components/prism-python\" */ prism.languages.python = {\n    \"comment\": {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n    },\n    \"string-interpolation\": {\n        pattern: /(?:f|fr|rf)(?:(\"\"\"|''')[\\s\\S]*?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n        greedy: true,\n        inside: {\n            \"interpolation\": {\n                // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n                pattern: /((?:^|[^{])(?:\\{\\{)*)\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}]|\\{(?!\\{)(?:[^{}])+\\})+\\})+\\}/,\n                lookbehind: true,\n                inside: {\n                    \"format-spec\": {\n                        pattern: /(:)[^:(){}]+(?=\\}$)/,\n                        lookbehind: true\n                    },\n                    \"conversion-option\": {\n                        pattern: /![sra](?=[:}]$)/,\n                        alias: \"punctuation\"\n                    },\n                    rest: null\n                }\n            },\n            \"string\": /[\\s\\S]+/\n        }\n    },\n    \"triple-quoted-string\": {\n        pattern: /(?:[rub]|br|rb)?(\"\"\"|''')[\\s\\S]*?\\1/i,\n        greedy: true,\n        alias: \"string\"\n    },\n    \"string\": {\n        pattern: /(?:[rub]|br|rb)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n        greedy: true\n    },\n    \"function\": {\n        pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n        lookbehind: true\n    },\n    \"class-name\": {\n        pattern: /(\\bclass\\s+)\\w+/i,\n        lookbehind: true\n    },\n    \"decorator\": {\n        pattern: /(^[\\t ]*)@\\w+(?:\\.\\w+)*/m,\n        lookbehind: true,\n        alias: [\n            \"annotation\",\n            \"punctuation\"\n        ],\n        inside: {\n            \"punctuation\": /\\./\n        }\n    },\n    \"keyword\": /\\b(?:_(?=\\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n    \"builtin\": /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n    \"boolean\": /\\b(?:False|None|True)\\b/,\n    \"number\": /\\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+(?:_\\d+)*)(?:e[+-]?\\d+(?:_\\d+)*)?j?(?!\\w)/i,\n    \"operator\": /[-+%=]=?|!=|:=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n    \"punctuation\": /[{}[\\];(),.:]/\n};\nprism.languages.python[\"string-interpolation\"].inside[\"interpolation\"].inside.rest = prism.languages.python;\nprism.languages.py = prism.languages.python;\n/* \"prismjs/components/prism-reason\" */ prism.languages.reason = prism.languages.extend(\"clike\", {\n    \"string\": {\n        pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n    },\n    // 'class-name' must be matched *after* 'constructor' defined below\n    \"class-name\": /\\b[A-Z]\\w*/,\n    \"keyword\": /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n    \"operator\": /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:asr|land|lor|lsl|lsr|lxor|mod)\\b/\n});\nprism.languages.insertBefore(\"reason\", \"class-name\", {\n    \"char\": {\n        pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n        greedy: true\n    },\n    // Negative look-ahead prevents from matching things like String.capitalize\n    \"constructor\": /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    \"label\": {\n        pattern: /\\b[a-z]\\w*(?=::)/,\n        alias: \"symbol\"\n    }\n}); // We can't match functions property, so let's not even try.\ndelete prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */ (function(Prism) {\n    Prism.languages.sass = Prism.languages.extend(\"css\", {\n        // Sass comments don't need to be closed, only indented\n        \"comment\": {\n            pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n            lookbehind: true,\n            greedy: true\n        }\n    });\n    Prism.languages.insertBefore(\"sass\", \"atrule\", {\n        // We want to consume the whole line\n        \"atrule-line\": {\n            // Includes support for = and + shortcuts\n            pattern: /^(?:[ \\t]*)[@+=].+/m,\n            greedy: true,\n            inside: {\n                \"atrule\": /(?:@[\\w-]+|[+=])/\n            }\n        }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [\n        /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|not|or)\\b/,\n        {\n            pattern: /(\\s)-(?=\\s)/,\n            lookbehind: true\n        }\n    ];\n    Prism.languages.insertBefore(\"sass\", \"property\", {\n        // We want to consume the whole line\n        \"variable-line\": {\n            pattern: /^[ \\t]*\\$.+/m,\n            greedy: true,\n            inside: {\n                \"punctuation\": /:/,\n                \"variable\": variable,\n                \"operator\": operator\n            }\n        },\n        // We want to consume the whole line\n        \"property-line\": {\n            pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n            greedy: true,\n            inside: {\n                \"property\": [\n                    /[^:\\s]+(?=\\s*:)/,\n                    {\n                        pattern: /(:)[^:\\s]+/,\n                        lookbehind: true\n                    }\n                ],\n                \"punctuation\": /:/,\n                \"variable\": variable,\n                \"operator\": operator,\n                \"important\": Prism.languages.sass.important\n            }\n        }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore(\"sass\", \"punctuation\", {\n        \"selector\": {\n            pattern: /^([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/m,\n            lookbehind: true,\n            greedy: true\n        }\n    });\n})(prism);\n/* \"prismjs/components/prism-scss\" */ prism.languages.scss = prism.languages.extend(\"css\", {\n    \"comment\": {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n    },\n    \"atrule\": {\n        pattern: /@[\\w-](?:\\([^()]+\\)|[^()\\s]|\\s+(?!\\s))*?(?=\\s+[{;])/,\n        inside: {\n            \"rule\": /@[\\w-]+/ // See rest below\n        }\n    },\n    // url, compassified\n    \"url\": /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    \"selector\": {\n        // Initial look-ahead is used to prevent matching of blank selectors\n        pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()\\s]|\\s+(?!\\s)|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}][^:{}]*[:{][^}]))/,\n        inside: {\n            \"parent\": {\n                pattern: /&/,\n                alias: \"important\"\n            },\n            \"placeholder\": /%[-\\w]+/,\n            \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    },\n    \"property\": {\n        pattern: /(?:[-\\w]|\\$[-\\w]|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n        inside: {\n            \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n        }\n    }\n});\nprism.languages.insertBefore(\"scss\", \"atrule\", {\n    \"keyword\": [\n        /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\\b/i,\n        {\n            pattern: /( )(?:from|through)(?= )/,\n            lookbehind: true\n        }\n    ]\n});\nprism.languages.insertBefore(\"scss\", \"important\", {\n    // var and interpolated vars\n    \"variable\": /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nprism.languages.insertBefore(\"scss\", \"function\", {\n    \"module-modifier\": {\n        pattern: /\\b(?:as|hide|show|with)\\b/i,\n        alias: \"keyword\"\n    },\n    \"placeholder\": {\n        pattern: /%[-\\w]+/,\n        alias: \"selector\"\n    },\n    \"statement\": {\n        pattern: /\\B!(?:default|optional)\\b/i,\n        alias: \"keyword\"\n    },\n    \"boolean\": /\\b(?:false|true)\\b/,\n    \"null\": {\n        pattern: /\\bnull\\b/,\n        alias: \"keyword\"\n    },\n    \"operator\": {\n        pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|not|or)(?=\\s)/,\n        lookbehind: true\n    }\n});\nprism.languages.scss[\"atrule\"].inside.rest = prism.languages.scss;\n/* \"prismjs/components/prism-stylus\" */ (function(Prism) {\n    var unit = {\n        pattern: /(\\b\\d+)(?:%|[a-z]+)/,\n        lookbehind: true\n    }; // 123 -123 .123 -.123 12.3 -12.3\n    var number = {\n        pattern: /(^|[^\\w.-])-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/,\n        lookbehind: true\n    };\n    var inside = {\n        \"comment\": {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n            lookbehind: true\n        },\n        \"url\": {\n            pattern: /\\burl\\(([\"']?).*?\\1\\)/i,\n            greedy: true\n        },\n        \"string\": {\n            pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n            greedy: true\n        },\n        \"interpolation\": null,\n        // See below\n        \"func\": null,\n        // See below\n        \"important\": /\\B!(?:important|optional)\\b/i,\n        \"keyword\": {\n            pattern: /(^|\\s+)(?:(?:else|for|if|return|unless)(?=\\s|$)|@[\\w-]+)/,\n            lookbehind: true\n        },\n        \"hexcode\": /#[\\da-f]{3,6}/i,\n        \"color\": [\n            /\\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\\b/i,\n            {\n                pattern: /\\b(?:hsl|rgb)\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*\\)\\B|\\b(?:hsl|rgb)a\\(\\s*\\d{1,3}\\s*,\\s*\\d{1,3}%?\\s*,\\s*\\d{1,3}%?\\s*,\\s*(?:0|0?\\.\\d+|1)\\s*\\)\\B/i,\n                inside: {\n                    \"unit\": unit,\n                    \"number\": number,\n                    \"function\": /[\\w-]+(?=\\()/,\n                    \"punctuation\": /[(),]/\n                }\n            }\n        ],\n        \"entity\": /\\\\[\\da-f]{1,8}/i,\n        \"unit\": unit,\n        \"boolean\": /\\b(?:false|true)\\b/,\n        \"operator\": [\n            // accepted in property names.\n            /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.{2,3}|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n        ],\n        \"number\": number,\n        \"punctuation\": /[{}()\\[\\];:,]/\n    };\n    inside[\"interpolation\"] = {\n        pattern: /\\{[^\\r\\n}:]+\\}/,\n        alias: \"variable\",\n        inside: {\n            \"delimiter\": {\n                pattern: /^\\{|\\}$/,\n                alias: \"punctuation\"\n            },\n            rest: inside\n        }\n    };\n    inside[\"func\"] = {\n        pattern: /[\\w-]+\\([^)]*\\).*/,\n        inside: {\n            \"function\": /^[^(]+/,\n            rest: inside\n        }\n    };\n    Prism.languages.stylus = {\n        \"atrule-declaration\": {\n            pattern: /(^[ \\t]*)@.+/m,\n            lookbehind: true,\n            inside: {\n                \"atrule\": /^@[\\w-]+/,\n                rest: inside\n            }\n        },\n        \"variable-declaration\": {\n            pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:\\{[^{}]*\\}|\\S.*|$)/m,\n            lookbehind: true,\n            inside: {\n                \"variable\": /^\\S+/,\n                rest: inside\n            }\n        },\n        \"statement\": {\n            pattern: /(^[ \\t]*)(?:else|for|if|return|unless)[ \\t].+/m,\n            lookbehind: true,\n            inside: {\n                \"keyword\": /^\\S+/,\n                rest: inside\n            }\n        },\n        // A property/value pair cannot end with a comma or a brace\n        // It cannot have indented content unless it ended with a semicolon\n        \"property-declaration\": {\n            pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)(?!\\s)[^{\\r\\n]*(?:;|[^{\\r\\n,]$(?!(?:\\r?\\n|\\r)(?:\\{|\\2[ \\t])))/m,\n            lookbehind: true,\n            inside: {\n                \"property\": {\n                    pattern: /^[^\\s:]+/,\n                    inside: {\n                        \"interpolation\": inside.interpolation\n                    }\n                },\n                rest: inside\n            }\n        },\n        // A selector can contain parentheses only as part of a pseudo-element\n        // It can span multiple lines.\n        // It must end with a comma or an accolade or have indented content.\n        \"selector\": {\n            pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\)|(?![\\w-]))|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t])))/m,\n            lookbehind: true,\n            inside: {\n                \"interpolation\": inside.interpolation,\n                \"comment\": inside.comment,\n                \"punctuation\": /[{},]/\n            }\n        },\n        \"func\": inside.func,\n        \"string\": inside.string,\n        \"comment\": {\n            pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n            lookbehind: true,\n            greedy: true\n        },\n        \"interpolation\": inside.interpolation,\n        \"punctuation\": /[{}()\\[\\];:.]/\n    };\n})(prism);\n/* \"prismjs/components/prism-tsx\" */ (function(Prism) {\n    var typescript = Prism.util.clone(Prism.languages.typescript);\n    Prism.languages.tsx = Prism.languages.extend(\"jsx\", typescript); // doesn't work with TS because TS is too complex\n    delete Prism.languages.tsx[\"parameter\"];\n    delete Prism.languages.tsx[\"literal-property\"]; // This will prevent collisions between TSX tags and TS generic types.\n    // Idea by https://github.com/karlhorky\n    // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n    var tag = Prism.languages.tsx.tag;\n    tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + \"(?:\" + tag.pattern.source + \")\", tag.pattern.flags);\n    tag.lookbehind = true;\n})(prism);\n/* \"prismjs/components/prism-wasm\" */ prism.languages.wasm = {\n    \"comment\": [\n        /\\(;[\\s\\S]*?;\\)/,\n        {\n            pattern: /;;.*/,\n            greedy: true\n        }\n    ],\n    \"string\": {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n        greedy: true\n    },\n    \"keyword\": [\n        {\n            pattern: /\\b(?:align|offset)=/,\n            inside: {\n                \"operator\": /=/\n            }\n        },\n        {\n            pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n            inside: {\n                \"punctuation\": /\\./\n            }\n        },\n        /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/\n    ],\n    \"variable\": /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^`|~]+/,\n    \"number\": /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n    \"punctuation\": /[()]/\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prism);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/prism/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/themes/duotoneDark/index.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/themes/duotoneDark/index.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Duotone Dark\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\nvar theme = {\n    plain: {\n        backgroundColor: \"#2a2734\",\n        color: \"#9a86fd\"\n    },\n    styles: [\n        {\n            types: [\n                \"comment\",\n                \"prolog\",\n                \"doctype\",\n                \"cdata\",\n                \"punctuation\"\n            ],\n            style: {\n                color: \"#6c6783\"\n            }\n        },\n        {\n            types: [\n                \"namespace\"\n            ],\n            style: {\n                opacity: 0.7\n            }\n        },\n        {\n            types: [\n                \"tag\",\n                \"operator\",\n                \"number\"\n            ],\n            style: {\n                color: \"#e09142\"\n            }\n        },\n        {\n            types: [\n                \"property\",\n                \"function\"\n            ],\n            style: {\n                color: \"#9a86fd\"\n            }\n        },\n        {\n            types: [\n                \"tag-id\",\n                \"selector\",\n                \"atrule-id\"\n            ],\n            style: {\n                color: \"#eeebff\"\n            }\n        },\n        {\n            types: [\n                \"attr-name\"\n            ],\n            style: {\n                color: \"#c4b9fe\"\n            }\n        },\n        {\n            types: [\n                \"boolean\",\n                \"string\",\n                \"entity\",\n                \"url\",\n                \"attr-value\",\n                \"keyword\",\n                \"control\",\n                \"directive\",\n                \"unit\",\n                \"statement\",\n                \"regex\",\n                \"atrule\",\n                \"placeholder\",\n                \"variable\"\n            ],\n            style: {\n                color: \"#ffcc99\"\n            }\n        },\n        {\n            types: [\n                \"deleted\"\n            ],\n            style: {\n                textDecorationLine: \"line-through\"\n            }\n        },\n        {\n            types: [\n                \"inserted\"\n            ],\n            style: {\n                textDecorationLine: \"underline\"\n            }\n        },\n        {\n            types: [\n                \"italic\"\n            ],\n            style: {\n                fontStyle: \"italic\"\n            }\n        },\n        {\n            types: [\n                \"important\",\n                \"bold\"\n            ],\n            style: {\n                fontWeight: \"bold\"\n            }\n        },\n        {\n            types: [\n                \"important\"\n            ],\n            style: {\n                color: \"#c4b9fe\"\n            }\n        }\n    ]\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (theme);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vcHJpc20tcmVhY3QtcmVuZGVyZXJAMS4zLjVfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9wcmlzbS1yZWFjdC1yZW5kZXJlci90aGVtZXMvZHVvdG9uZURhcmsvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWU7QUFDZixnSEFBZ0g7QUFDaEgsd0hBQXdIO0FBQ3hILG1GQUFtRjtBQUNuRixJQUFJQSxRQUFRO0lBQ1ZDLE9BQU87UUFDTEMsaUJBQWlCO1FBQ2pCQyxPQUFPO0lBQ1Q7SUFDQUMsUUFBUTtRQUFDO1lBQ1BDLE9BQU87Z0JBQUM7Z0JBQVc7Z0JBQVU7Z0JBQVc7Z0JBQVM7YUFBYztZQUMvREMsT0FBTztnQkFDTEgsT0FBTztZQUNUO1FBQ0Y7UUFBRztZQUNERSxPQUFPO2dCQUFDO2FBQVk7WUFDcEJDLE9BQU87Z0JBQ0xDLFNBQVM7WUFDWDtRQUNGO1FBQUc7WUFDREYsT0FBTztnQkFBQztnQkFBTztnQkFBWTthQUFTO1lBQ3BDQyxPQUFPO2dCQUNMSCxPQUFPO1lBQ1Q7UUFDRjtRQUFHO1lBQ0RFLE9BQU87Z0JBQUM7Z0JBQVk7YUFBVztZQUMvQkMsT0FBTztnQkFDTEgsT0FBTztZQUNUO1FBQ0Y7UUFBRztZQUNERSxPQUFPO2dCQUFDO2dCQUFVO2dCQUFZO2FBQVk7WUFDMUNDLE9BQU87Z0JBQ0xILE9BQU87WUFDVDtRQUNGO1FBQUc7WUFDREUsT0FBTztnQkFBQzthQUFZO1lBQ3BCQyxPQUFPO2dCQUNMSCxPQUFPO1lBQ1Q7UUFDRjtRQUFHO1lBQ0RFLE9BQU87Z0JBQUM7Z0JBQVc7Z0JBQVU7Z0JBQVU7Z0JBQU87Z0JBQWM7Z0JBQVc7Z0JBQVc7Z0JBQWE7Z0JBQVE7Z0JBQWE7Z0JBQVM7Z0JBQVU7Z0JBQWU7YUFBVztZQUNqS0MsT0FBTztnQkFDTEgsT0FBTztZQUNUO1FBQ0Y7UUFBRztZQUNERSxPQUFPO2dCQUFDO2FBQVU7WUFDbEJDLE9BQU87Z0JBQ0xFLG9CQUFvQjtZQUN0QjtRQUNGO1FBQUc7WUFDREgsT0FBTztnQkFBQzthQUFXO1lBQ25CQyxPQUFPO2dCQUNMRSxvQkFBb0I7WUFDdEI7UUFDRjtRQUFHO1lBQ0RILE9BQU87Z0JBQUM7YUFBUztZQUNqQkMsT0FBTztnQkFDTEcsV0FBVztZQUNiO1FBQ0Y7UUFBRztZQUNESixPQUFPO2dCQUFDO2dCQUFhO2FBQU87WUFDNUJDLE9BQU87Z0JBQ0xJLFlBQVk7WUFDZDtRQUNGO1FBQUc7WUFDREwsT0FBTztnQkFBQzthQUFZO1lBQ3BCQyxPQUFPO2dCQUNMSCxPQUFPO1lBQ1Q7UUFDRjtLQUFFO0FBQ0o7QUFFQSxpRUFBZUgsS0FBS0EsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LWVtYWlsLWNsaWVudC8uL25vZGVfbW9kdWxlcy8ucG5wbS9wcmlzbS1yZWFjdC1yZW5kZXJlckAxLjMuNV9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL3ByaXNtLXJlYWN0LXJlbmRlcmVyL3RoZW1lcy9kdW90b25lRGFyay9pbmRleC5qcz9lMjBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIER1b3RvbmUgRGFya1xuLy8gQXV0aG9yOiBTaW11cmFpLCBhZGFwdGVkIGZyb20gRHVvVG9uZSB0aGVtZXMgZm9yIEF0b20gKGh0dHA6Ly9zaW11cmFpLmNvbS9wcm9qZWN0cy8yMDE2LzAxLzAxL2R1b3RvbmUtdGhlbWVzKVxuLy8gQ29udmVyc2lvbjogQnJhbSBkZSBIYWFuIChodHRwOi8vYXRlbGllcmJyYW0uZ2l0aHViLmlvL0Jhc2UyVG9uZS1wcmlzbS9vdXRwdXQvcHJpc20vcHJpc20tYmFzZTJ0b25lLWV2ZW5pbmctZGFyay5jc3MpXG4vLyBHZW5lcmF0ZWQgd2l0aCBCYXNlMTYgQnVpbGRlciAoaHR0cHM6Ly9naXRodWIuY29tL2Jhc2UxNi1idWlsZGVyL2Jhc2UxNi1idWlsZGVyKVxudmFyIHRoZW1lID0ge1xuICBwbGFpbjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogXCIjMmEyNzM0XCIsXG4gICAgY29sb3I6IFwiIzlhODZmZFwiXG4gIH0sXG4gIHN0eWxlczogW3tcbiAgICB0eXBlczogW1wiY29tbWVudFwiLCBcInByb2xvZ1wiLCBcImRvY3R5cGVcIiwgXCJjZGF0YVwiLCBcInB1bmN0dWF0aW9uXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjNmM2NzgzXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1wibmFtZXNwYWNlXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBvcGFjaXR5OiAwLjdcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1widGFnXCIsIFwib3BlcmF0b3JcIiwgXCJudW1iZXJcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiNlMDkxNDJcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJwcm9wZXJ0eVwiLCBcImZ1bmN0aW9uXCJdLFxuICAgIHN0eWxlOiB7XG4gICAgICBjb2xvcjogXCIjOWE4NmZkXCJcbiAgICB9XG4gIH0sIHtcbiAgICB0eXBlczogW1widGFnLWlkXCIsIFwic2VsZWN0b3JcIiwgXCJhdHJ1bGUtaWRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiNlZWViZmZcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJhdHRyLW5hbWVcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiNjNGI5ZmVcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJib29sZWFuXCIsIFwic3RyaW5nXCIsIFwiZW50aXR5XCIsIFwidXJsXCIsIFwiYXR0ci12YWx1ZVwiLCBcImtleXdvcmRcIiwgXCJjb250cm9sXCIsIFwiZGlyZWN0aXZlXCIsIFwidW5pdFwiLCBcInN0YXRlbWVudFwiLCBcInJlZ2V4XCIsIFwiYXRydWxlXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJ2YXJpYWJsZVwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2ZmY2M5OVwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImRlbGV0ZWRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uTGluZTogXCJsaW5lLXRocm91Z2hcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJpbnNlcnRlZFwiXSxcbiAgICBzdHlsZToge1xuICAgICAgdGV4dERlY29yYXRpb25MaW5lOiBcInVuZGVybGluZVwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcIml0YWxpY1wiXSxcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImltcG9ydGFudFwiLCBcImJvbGRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImltcG9ydGFudFwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2M0YjlmZVwiXG4gICAgfVxuICB9XVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGhlbWU7XG4iXSwibmFtZXMiOlsidGhlbWUiLCJwbGFpbiIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwic3R5bGVzIiwidHlwZXMiLCJzdHlsZSIsIm9wYWNpdHkiLCJ0ZXh0RGVjb3JhdGlvbkxpbmUiLCJmb250U3R5bGUiLCJmb250V2VpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/prism-react-renderer@1.3.5_react@18.2.0/node_modules/prism-react-renderer/themes/duotoneDark/index.js\n");

/***/ })

};
;